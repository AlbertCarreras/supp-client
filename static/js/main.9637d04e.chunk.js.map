{"version":3,"sources":["Adapters/Adapters.js","Actions/userInterestsActions.js","Components/LeftInterestsSection/SearchList.js","Components/LeftInterestsSection/NewSearchWordForm.js","Components/LeftInterestsSection/Search.js","Components/CentralUsersSection/UserInterestList.js","Components/LeftInterestsSection/InterestsList.js","Components/LeftInterestsSection/InterestsAside.js","Components/CentralUsersSection/FriendInterestList.js","Adapters/AdapterChats.js","Actions/userConversationsActions.js","Components/CentralUsersSection/StartChatButton.js","Components/CentralUsersSection/ProfileSquare.js","Components/CentralUsersSection/ProfileModal.js","Components/CentralUsersSection/UserList.js","Components/RightChatsSection/NewMessageForm.js","Components/RightChatsSection/MessagesArea.js","Components/RightChatsSection/MessagesCables.js","Components/RightChatsSection/Conversation.js","Components/RightChatsSection/ConversationsList.js","Components/RightChatsSection/MessagingAside.js","Components/PresenceCable.js","Components/RightChatsSection/ConversationsCables.js","Components/HomeContainer.js","Components/Login.js","Components/Signup.js","Components/Loading.js","Components/WelcomeContainer.js","Adapters/AdapterUser.js","App.js","Components/UpdateProfile.js","Components/Footer.js","Components/ProfileNavBar.js","Components/IconMenuHeader.js","Actions/containerDisplayActions.js","Components/Header.js","Actions/userAuthActions.js","Actions/userFriendsActions.js","Adapters/AdapterConstants.js","registerServiceWorker.js","Reducers/userAuthReducer.js","Reducers/userProfileReducer.js","Reducers/userInterestsReducer.js","Reducers/userFriendsReducer.js","Reducers/userConversationsReducer.js","Reducers/containerDisplayReducer.js","Reducers/rootReducer.js","store.js","index.js","types.js","Actions/userProfileActions.js"],"names":["Adapters","term","split","map","w","charAt","toUpperCase","slice","join","username","capitalize","substring","dist","undefined","concat","toFixed","config","url","GITHUB_URL_ROOT","Math","ceil","random","floor","apiUrl","getNotPicAvatar","API_SHORT_ROOT","searchTerm","fetch","API_ROOT","method","headers","AUTH_HEADERS_JSON_JWT","body","JSON","stringify","search","toLowerCase","then","resp","json","thunkSaveUserInterests","userId","userInterests","bodyPersistAddInterests","user","interests","dispatch","Accept","Content-Type","Authorization","localStorage","getItem","type","SAVE_USER_INTERESTS","payload","userInterestArray","catch","ADD_ERROR_MESSAGE","key","value","AdapterUser","deleteToken","LOGOUT","selectCommonInterests","selectedCommonInterest","SELECT_COMMON_INTERESTS","connect","state","selectedInterest","userAuth","thunkSaveFilteredClosestUsers","termId","withRouter","props","react_default","a","createElement","className","searchTermArray","filter","id","name","Icon","onClick","color","find","i","buildInterestList","thunkCreateNewWord","newTerm","interest","cleanSearchTerm","Search","handleChange","event","require","addWords","removeWords","_this","setState","Object","defineProperty","target","isProfane","length","_","debounce","getSearchMatches","err","call","assertThisInitialized","displayInterestList","LeftInterestsSection_SearchList","LeftInterestsSection_NewSearchWordForm","checkValues","placeholder","onChange","this","Component","thunkRemoveUserInterests","userInterest","bodyPersistRemoveInterests","interestId","onClickClose","InterestsList","unselectCommonInterests","thunkSaveClosestUsers","CentralUsersSection_UserInterestList","UNSELECT_COMMON_INTERESTS","InterestsAside","LeftInterestsSection_Search","LeftInterestsSection_InterestsList","friendInterestArray","AdapterChats","AUTH_HEADERS_JWT","res","route","bodyData","saveSelectedConversation","selectedConversation","SAVE_SELECTED_CONVERSATION","user_sender_id","conversations","userConversations","selectedConversationId","handleClick","title","sender_id","receiver_id","user_receiver_id","userReceiverId","conversationFound","conversation","users","includes","conversationExists","fetchToWebsocket","Button","primary","divStyleActive","background","divStyleInactive","ProfileSquare","isActive","active_user","render","handleOpen","usernameShortFormat","distance","style","src","getStandardImageUrl","profileImageLink","alt","ProfileModal","modalOpen","handleClose","selectTrigger","origin","CentralUsersSection_ProfileSquare","displayDistance","displayBio","bio","react","NavLink","to","URL_USER_PROFILE","exact","Modal","dimmer","size","trigger","open","onClose","Header","Content","image","Image","wrapped","Description","CentralUsersSection_FriendInterestList","Actions","CentralUsersSection_StartChatButton","UserList","generateUserList","closestUsers","CentralUsersSection_ProfileModal","getReadableDistance","prevGeolocationLat","Loader","active","userProfile","loggedIn","userFriends","NewMessageForm","text","e","clean","pressedEnter","handleSubmit","conversation_id","onKeyDown","divStyleUser","textAlign","divStyleFriend","cleanSelectedConversation","CLEAN_SELECTED_CONVERSATION","friendUser","u","console","log","profile_image_url","messages","sort","b","Date","created_at","message","timestamp","toLocaleString","hour","minute","hour12","RightChatsSection_NewMessageForm","MessagesCables","handleReceivedMessage","response","toConsumableArray","saveUpdatedConversations","_this2","lib","channel","onReceived","SAVE_CONVERSATIONS","findConversationUser","ConversationsList","componentDidMount","thunkSaveConversations","mapConversations","RightChatsSection_Conversation","RightChatsSection_MessagesCables","RightChatsSection_MessagesArea","React","MessagingAside","RightChatsSection_ConversationsList","PresenceCable","handleReceivedActiveUser","closestUser","updateClosestUsers","closestUsers2","closestUser2","ConversationsCables","handleReceivedConversation","appendNewConversation","newConversation","receivedNewConversation","APPEND_NEW_CONVERSATION","showChatContainer","containerDisplay","showInterestsContainer","Components_PresenceCable","RightChatsSection_ConversationsCables","RightChatsSection_MessagingAside","LeftInterestsSection_InterestsAside","CentralUsersSection_UserList","Login","email","password","displayErrors","field","errorMessages","cleanErrorMessages","login","setToken","jwt","jwtSavedInLocalStorage","history","push","URL_HOME","addErrorMessage","onKeyUp","URL_SIGNUP","Signup","confirmPassword","agreedCheckbox","checkboxColor","handleCheckbox","displayMessages","keys","evaluateFields","submitSignIn","trim","test","signup","ok","URL_LOGIN","r","errors","checked","agreed","Loading","WelcomeContainer","getToken","Components_Loading","Switch","Route","path","component","URL_ROOT","jsonToken","setItem","removeItem","loginState","INIT_HEADERS","auth","signupState","password_confirmation","App","getCurrentPosition","navigator","geolocation","thunkPersistCurrentGeolocation","coords","latitude","longitude","routerFunction","react__WEBPACK_IMPORTED_MODULE_5___default","react_actioncable_provider__WEBPACK_IMPORTED_MODULE_10__","API_WS_ROOT","react_router_dom__WEBPACK_IMPORTED_MODULE_7__","react_router_dom__WEBPACK_IMPORTED_MODULE_8__","UpdateProfile","HomeContainer","thunkLogin","prevProps","lat","lon","jwtToken","_Components_Header__WEBPACK_IMPORTED_MODULE_17__","_Components_Footer__WEBPACK_IMPORTED_MODULE_21__","hot","module","profile_image","_Users_alberto_Desktop_ACC_Projects_supp_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","handleUpload","files","thunkUploadProfile","user_id","thunkUpdateProfileInfo","react__WEBPACK_IMPORTED_MODULE_6___default","react__WEBPACK_IMPORTED_MODULE_6__","ref","fileInput","profileImage","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","Footer","logout","displayScreenContainers","chatAction","interestAction","chat","DISPLAY_SCREEN_CONTAINER","iconSelected","Components_IconMenuHeader","Components_ProfileNavBar","d","__webpack_exports__","_Adapters_AdapterConstants__WEBPACK_IMPORTED_MODULE_0__","_Adapters_AdapterUser__WEBPACK_IMPORTED_MODULE_1__","_types__WEBPACK_IMPORTED_MODULE_2__","LOGIN","prevGeolocationLon","JWT","CLEAN_ERROR_MESSAGES","SAVE_CLOSEST_USERS","filterTermId","filterId","SAVE_FILTERED_CLOSEST_USERS","UPDATE_ACTIVE_CLOSEST_USERS","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","initialState","combinedReducers","combineReducers","arguments","action","objectSpread","SAVE_PROFILE","SAVE_PROFILE_IMAGE","SAVE_CURRENT_GEOLOCATION","reducer","store","createStore","applyMiddleware","thunk","ReactDOM","es","BrowserRouter","src_App","document","getElementById","URL","process","addEventListener","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","last_location_lat","last_location_lon","formData","FormData","append","bodyUpdateProfileInfo","assign","_Users_alberto_Desktop_ACC_Projects_supp_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__"],"mappings":"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","file":"static/js/main.9637d04e.chunk.js","sourcesContent":["// ADAPTERS\nimport {config} from './AdapterConstants'\nimport {AUTH_HEADERS_JSON_JWT} from './AdapterConstants'\n\nclass Adapters {\n\n    //NAMING\n    // Return name with each words capitalized\n    static  capitalize(term) {\n        return term.split(\" \").map((w) => w.charAt(0).toUpperCase() + w.slice(1)).join(\" \")\n    }\n    \n    // Return first name capitalized up to 9 characters\n    static usernameShortFormat(username) {\n        return Adapters.capitalize(username).split(\" \")[0].substring(0, 9)\n    }\n\n    //DISTANCE\n    // Return human-readable distance in feet or miles\n    static  getReadableDistance(dist) {\n        \n        if (dist !== undefined) {\n            return dist < 1 \n            ? `${(dist * 5280).toFixed(1)} ft`\n            : `${(dist).toFixed(1)} mi`\n        }\n        else {\n            return null\n        }\n        \n    }\n\n    //IMAGE URL STANDARIZER\n    // Return random avatar image\n    static  getNotPicAvatar() {\n        return config.url.GITHUB_URL_ROOT+`/assets/avatars/avatar${Math.ceil(Math.random() * Math.floor(4))}.gif`\n    }\n    \n    // Check if url to profile image exists. If undefined, return avatar image. If valid url, return full server url.\n    static  getStandardImageUrl(apiUrl) {\n        if (apiUrl === \"undefined\") {\n            return Adapters.getNotPicAvatar()\n        }\n        else if (apiUrl === undefined) {\n            return Adapters.getNotPicAvatar()\n        }\n        else if (apiUrl.substring(0, 6) === \"/rails\") {\n            return `${config.url.API_SHORT_ROOT+apiUrl}`\n        }\n        return apiUrl\n    }\n\n\n     //API DATA\n     // Fetch interest search input and return server response.\n    static  getSearchMatches(searchTerm) {\n        return fetch(`${config.url.API_ROOT}/interests`, {\n            method: 'POST',\n            headers: AUTH_HEADERS_JSON_JWT,\n            body: JSON.stringify({\n                \"search\": {\n                  \"searchTerm\": searchTerm.toLowerCase(),\n                }\n            })\n        })\n        .then(resp => resp.json())\n    }\n    \n}\n\nexport default Adapters;\n","//CONSTANTS\nimport {config} from './../Adapters/AdapterConstants'\nimport AdapterUser from './../Adapters/AdapterUser';\n\n//TYPES\nimport {\n    LOGOUT,\n    SAVE_USER_INTERESTS,\n    SELECT_COMMON_INTERESTS, \n    UNSELECT_COMMON_INTERESTS,\n    ADD_ERROR_MESSAGE\n} from './../types';\n\n//REDUX-THUNK actions\n// Users add interests from list persisting changes.\nexport const thunkSaveUserInterests = (userId, userInterests) => {\n\n    let bodyPersistAddInterests = {\"user\": {\n        \"interests\": userInterests\n      }};\n\n    return (dispatch) => {\n        fetch(`${config.url.API_ROOT}/user/${userId}/interests`, {\n            method: 'POST',\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(bodyPersistAddInterests)\n        })\n        .then(resp=>resp.json())\n        .then(resp => dispatch( { \n            type: SAVE_USER_INTERESTS,\n            payload: {\n                userInterestArray: resp.interests,\n            }\n        }))\n        .catch(() => {\n            dispatch( { \n                type: ADD_ERROR_MESSAGE,\n                payload: {\n                    key: \"unauthorizedToken\",\n                    value: \"Unauthorized credentials. Please, log in again.\",\n                }\n            })\n            AdapterUser.deleteToken();\n            return dispatch( { \n            type: LOGOUT,\n        })})\n    }\n}\n\n// Users remove interests from list persisting changes.\nexport const thunkRemoveUserInterests = (userInterests) => {\n    \n    let bodyPersistRemoveInterests = {\"user\": {\n        \"interests\": userInterests\n      }};\n\n    return (dispatch) => {\n        fetch(`${config.url.API_ROOT}/user_interests/${userInterests.id}`, {\n            method: 'DELETE',\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(bodyPersistRemoveInterests)\n        })\n        .then(resp=>resp.json())\n        .then(resp => dispatch( { \n            type: SAVE_USER_INTERESTS,\n            payload: {\n                userInterestArray: resp.interests,\n            }\n        }))\n        .catch(() => {\n            dispatch( { \n                type: ADD_ERROR_MESSAGE,\n                payload: {\n                    key: \"unauthorizedToken\",\n                    value: \"Unauthorized credentials. Please, log in again.\",\n                }\n            })\n            AdapterUser.deleteToken();\n            return dispatch( { \n            type: LOGOUT,\n        })})\n    }\n}\n\n// If users look for  word that does not exist yet in the database, they can click on the new word an persisted.\nexport const thunkCreateNewWord = (userId, newTerm) => {\n    \n    return (dispatch) => {\n        fetch(`${config.url.API_ROOT}/interests/create`, {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`\n              },\n            body: JSON.stringify({\n                \"interest\": {\n                    \"newTerm\": newTerm,\n                }\n            })\n        })\n        .then(resp => resp.json())\n        .then(resp => dispatch(\n            thunkSaveUserInterests(userId, resp)\n        ))\n        .catch(() => {\n            dispatch( { \n                type: ADD_ERROR_MESSAGE,\n                payload: {\n                    key: \"unauthorizedToken\",\n                    value: \"Sorry, there was an error processing the information. Please, log in again.\",\n                }\n            })\n            AdapterUser.deleteToken();\n            return dispatch( { \n            type: LOGOUT,\n        })})\n    }\n}\n\nexport function selectCommonInterests(selectedCommonInterest) {\n    return {\n        type: SELECT_COMMON_INTERESTS,\n        payload: {\n            selectedCommonInterest: selectedCommonInterest,\n        }\n    }\n}\n\nexport function unselectCommonInterests() {\n    return {\n        type: UNSELECT_COMMON_INTERESTS,\n    }\n}","import React from 'react';\nimport { Icon } from 'semantic-ui-react'\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from 'react-redux';\n\n// ADAPTERS\nimport Adapters from './../../Adapters/Adapters';\n\n// ACTIONS\nimport { selectCommonInterests, thunkSaveUserInterests } from './../../Actions/userInterestsActions';\nimport { thunkSaveFilteredClosestUsers } from './../../Actions/userFriendsActions';\n\n// REDUX PROPS \nconst mapStateToProps = state => {\n    return {\n        selectedInterest: state.userInterests.selectedCommonInterest,\n        userInterests: state.userInterests.userInterests,\n        userId: state.userAuth.userId\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        selectCommonInterests: (selectedCommonInterest) => dispatch(selectCommonInterests(selectedCommonInterest)),\n        thunkSaveUserInterests: (userId, userInterestArray) => dispatch(thunkSaveUserInterests(userId, userInterestArray)),\n        thunkSaveFilteredClosestUsers: (termId) => dispatch(thunkSaveFilteredClosestUsers(termId)),\n\n    }\n  }\n\nconst SearchList = (props) => {\n\n    function buildInterestList() {\n        let searchTermArray = props.searchTermArray\n        // Filter the returned array of interests so it does not display an interest that has been selected to find matching people.\n        if (props.selectedInterest !== undefined) {\n            searchTermArray = searchTermArray.filter((term) => term !== props.selectedInterest)\n        }\n\n        return searchTermArray.map( (term) => {\n            //Map over the returned array of interests. Add icons with functionality: add interests to user list or select interest from which to look for matching people with same interests.\n            return  <div key={term.id}>\n                        {Adapters.capitalize(term.name)}\n                        <Icon \n                            onClick={() => {\n                                props.selectCommonInterests(term)\n                                props.thunkSaveFilteredClosestUsers(term.id)\n                            }}\n                            color='teal' \n                            name='users' \n                        />\n                        { \n                            //If the user already has interest in their list, don't display icon to add again.\n                            !props.userInterests.find((i)=> i.id === term.id)\n                            ?   <Icon \n                                    onClick={() => {\n                                        props.thunkSaveUserInterests(props.userId, term)\n                                    }}\n                                    color='teal'\n                                    name='user plus'\n                                />\n                            : null\n                        }\n                        \n                    </div>\n        })\n    }\n\n    return (\n        <div className=\"interest-list\">\n            {buildInterestList()}\n        </div>\n    )\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(SearchList));","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Icon } from 'semantic-ui-react'\n\n//ADAPTERS\nimport Adapters from './../../Adapters/Adapters';\n\n// ACTIONS\nimport { thunkCreateNewWord } from './../../Actions/userInterestsActions';\n\n// REDUX PROPS \nconst mapStateToProps = state => {\n  return {\n      userId: state.userAuth.userId,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    thunkCreateNewWord: (userId, newTerm) => dispatch(thunkCreateNewWord(userId, newTerm)),\n  }\n}\n\nconst NewSearchWordForm = (props) => {\n\n  return (\n    <div \n      className=\"new-word-input\"\n      onClick={() => {\n        props.thunkCreateNewWord(props.userId, Adapters.capitalize(props.searchTerm.toLowerCase()));\n        props.cleanSearchTerm();\n      }}\n    >\n      <p>New interest!</p> \n        <div className=\"new-word-btn\">\n          <Icon \n            color='teal' \n            name='add'\n          />\n          {Adapters.capitalize(props.searchTerm.toLowerCase())}\n        </div>\n    </div>\n  )\n\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewSearchWordForm);","import React, {Component} from 'react';\nimport { Icon } from 'semantic-ui-react'\nimport _ from 'lodash'\n\n// ADAPTERS\nimport Adapters from './../../Adapters/Adapters';\n\n//COMPONENTS\nimport SearchList from './SearchList'\nimport NewSearchWordForm from './NewSearchWordForm'\n\nclass Search extends Component {\n    // keeping local state for controlled inputs\n    state = {\n        searchTerm: \"\",\n        searchTermArray: [],\n    };\n\n    //PROPS FUNCTIONALITY: Button handlers\n    handleChange = (event) => {\n        //Bad-words functionality \n        var Filter = require('bad-words'),\n        filter = new Filter();\n        filter.addWords(\"suck\")\n        filter.removeWords(\"hell\")\n        this.setState({\n            [event.target.name]: filter.isProfane(event.target.value) ? \"\" : event.target.value,\n        }, () => this.searchTerm(this.state.searchTerm))\n    }\n\n    //SEARCH FUNCTIONALITY\n    searchTerm = (searchTerm) =>\n        // Check if searched term is valid and shorter than 2 letters. If so, input in state should be an empty array.\n        //If not, use debounce from Lodash to fetch and requests interests based on the input value. \n        searchTerm === \"\" || searchTerm.length < 2\n            ? this.setState({\n                searchTermArray: [],\n                })\n            : _.debounce( \n                () => Adapters.getSearchMatches(searchTerm)\n                .then( resp => this.setState({searchTermArray: resp}))\n                .catch(err => {})\n            , 100).call(this)\n\n    cleanSearchTerm = () => {\n        // Delete any input value when new word is persisted.\n        this.setState({\n            searchTerm: \"\",\n        })\n    }\n\n    displayInterestList = () => {\n        // Check if the returned array has any value. If so, display the results.\n        // If not, check if the search term is long enough. If so, show button for creating new interest. Passing helper function and state to component.\n        if (this.state.searchTermArray.length > 0) {\n            return <SearchList \n                        searchTermArray={this.state.searchTermArray}\n                    />\n        } \n        else if (this.state.searchTerm.length > 2 ) {\n            return <NewSearchWordForm \n                        searchTerm={this.state.searchTerm}\n                        cleanSearchTerm={this.cleanSearchTerm}\n                    />\n        }\n    }\n\n    checkValues = () => {\n        // Check if there is any searched term input. If so, display search results. If not, display \"start here\" sign.\n        if (this.state.searchTerm !== \"\") {\n            return this.displayInterestList()\n        } \n        else {\n            return <p className=\"animated bounceIn delay-5s\">\n                        Start here \n                        <Icon \n                            color='teal' \n                            name='arrow up' \n                        />\n                    </p>\n        }\n    }\n\n    render () {\n        return (\n                <div className=\"ui search\">\n                    <div className=\"ui icon input\">\n                        <input \n                            className=\"prompt\" \n                            type=\"text\"\n                            placeholder=\"Search activities you ♥\"\n                            name=\"searchTerm\"\n                            onChange={this.handleChange}\n                            value={this.state.searchTerm}\n                        />\n                        <i className=\"search icon\"></i>\n                    </div>\n                    { this.checkValues() }\n                </div>\n        )\n    }\n};\n\nexport default Search;","import React from 'react';\nimport { Icon } from 'semantic-ui-react'\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from 'react-redux';\n\n// ADAPTERS\nimport Adapters from './../../Adapters/Adapters';\n\n// ACTIONS\nimport { selectCommonInterests, thunkRemoveUserInterests } from './../../Actions/userInterestsActions';\nimport { thunkSaveFilteredClosestUsers } from './../../Actions/userFriendsActions';\n\n// REDUX PROPS \nconst mapStateToProps = state => {\n    return {\n        userInterests: state.userInterests.userInterests,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        selectCommonInterests: (selectedCommonInterest) => dispatch(selectCommonInterests(selectedCommonInterest)),\n        thunkRemoveUserInterests: (userInterest) => dispatch(thunkRemoveUserInterests(userInterest)),\n        thunkSaveFilteredClosestUsers: (interestId) => dispatch(thunkSaveFilteredClosestUsers(interestId)),\n    }\n  }\n\nconst UserInterestList = (props) => {\n\n    function buildInterestList() {\n\n        //Map over the returned array of interests. Add icons with functionality: remove interests to user list or select interest from which to look for matching people with same interests.\n        return props.userInterests.map( (interest) => {\n            return  <div key={interest.id}>\n                        {Adapters.capitalize(interest.name)}\n                            <Icon \n                                onClick={() => {\n                                    props.selectCommonInterests(interest)\n                                    props.thunkSaveFilteredClosestUsers(interest.id)\n                                    if (props.onClickClose) {\n                                        props.onClickClose()\n                                    }\n                                }}\n                                color='teal' \n                                name='users' \n                            />\n                            <Icon \n                                onClick={() => {\n                                    props.thunkRemoveUserInterests(interest)\n                                }}\n                                color='teal'\n                                name='user close'\n                            />\n                    </div>\n        })\n    }\n\n    return (\n        <div className=\"interest-list\">\n            { \n                // Check if user has any interest. If so, display them. Otherwise, display instructions.\n                props.userInterests.length > 0\n                ?   buildInterestList()\n                :   <div className=\"empty-message\">\n                        <p>Choose your activities clicking on \n                            <Icon \n                                color='teal'\n                                name='user plus'\n                            />\n                        </p>\n                        <p>Unselect your activities clicking on \n                            <Icon \n                                color='teal'\n                                name='user remove'\n                            />\n                        </p>\n                    </div>\n            }\n        </div>\n    )\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(UserInterestList));","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Icon } from 'semantic-ui-react'\n\n// ADAPTERS\nimport Adapters from './../../Adapters/Adapters';\n\n// ACTIONS\nimport { unselectCommonInterests, thunkSaveUserInterests } from './../../Actions/userInterestsActions';\nimport { thunkSaveClosestUsers } from './../../Actions/userFriendsActions';\n\n//COMPONENTS\nimport UserInterestList from './../CentralUsersSection/UserInterestList'\n\n// REDUX PROPS \nconst mapStateToProps = state => {\n    return {\n        selectedCommonInterest: state.userInterests.selectedCommonInterest,\n        userInterests: state.userInterests.userInterests\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        unselectCommonInterests: () => dispatch(unselectCommonInterests()),\n        thunkSaveUserInterests: (userId, userInterestArray) => dispatch(thunkSaveUserInterests(userId, userInterestArray)),\n        thunkSaveClosestUsers: () => dispatch(thunkSaveClosestUsers()),\n    }\n}\n\nclass InterestsList extends Component {\n    render() {\n        return (\n            <div>\n                <div \n                    className=\"heart-message\"\n                    >Meet people who \n                    <Icon \n                        color='red' \n                        name='heart'\n                    />\n                </div>\n                    {\n                        this.props.selectedCommonInterest !== undefined\n                            ?   <div className=\"line-container\">\n                                    {Adapters.capitalize(this.props.selectedCommonInterest.name)}\n                                    <Icon \n                                        onClick={ () => {\n                                            this.props.unselectCommonInterests()\n                                            this.props.thunkSaveClosestUsers()\n                                        }} \n                                        color='teal'\n                                        name='remove'\n                                    />\n                                    { !this.props.userInterests.find((i)=> i.id === this.props.selectedCommonInterest.id)\n                                        ?   <Icon \n                                                onClick={() => {\n                                                    this.props.thunkSaveUserInterests(this.props.userId, this.props.selectedCommonInterest)\n                                                }}\n                                                color='teal'\n                                                name='user plus'\n                                            />\n                                        : null\n                                        \n                                    }\n                                </div>\n                                :   <div className=\"empty-message\">\n                                        <p>Select an activity by clicking on \n                                            <Icon \n                                                color='teal'\n                                                name='users'\n                                            />\n                                        </p>\n                                        <p>Unselect your activities clicking on \n                                            <Icon \n                                                color='teal'\n                                                name='remove'\n                                            />\n                                        </p>\n                                    </div>\n\n                    } \n                <div \n                    className=\"heart-message\"\n                    >What you \n                        <Icon \n                            color='red' \n                            name='heart'\n                        />\n                </div>\n                <UserInterestList />\n            </div>\n       \n        );\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InterestsList);","import React, { Component } from 'react';\n\n//COMPONENTS\nimport Search from './Search';\nimport InterestsList from './InterestsList';\n\nclass InterestsAside extends Component {\n    render() {\n        \n        return (\n            <div className=\"aside-interest-container\">\n                <Search />\n                <InterestsList />\n            </div>\n\n        );\n    }\n}\n\nexport default InterestsAside;","import React from 'react';\nimport { Icon } from 'semantic-ui-react'\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from 'react-redux';\n\n// ADAPTERS\nimport Adapters from './../../Adapters/Adapters';\n\n// ACTIONS\nimport { selectCommonInterests } from './../../Actions/userInterestsActions';\nimport { thunkSaveFilteredClosestUsers } from './../../Actions/userFriendsActions';\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        selectCommonInterests: (selectedCommonInterest) => dispatch(selectCommonInterests(selectedCommonInterest)),\n        thunkSaveFilteredClosestUsers: (interestId) => dispatch(thunkSaveFilteredClosestUsers(interestId)),\n    }\n  }\n\nconst FriendInterestList = (props) => {\n\n    function buildInterestList() {\n        return props.friendInterestArray.map( (interest) => {\n            \n            //Map over the array of interests. Add icons with functionality: select interest from which to look for matching people with same interests.\n            return  <div key={interest.id}>\n                        {Adapters.capitalize(interest.name)}\n                        <Icon \n                            onClick={() => {\n                                props.selectCommonInterests(interest)\n                                props.thunkSaveFilteredClosestUsers(interest.id)\n                                props.onClickClose();\n                            }}\n                            color='teal' \n                            name='users' \n                        />\n                    </div>\n        })\n    }\n\n    return (\n        <div className=\"interest-list\">\n            {buildInterestList()}\n        </div>\n    )\n};\n\nexport default connect(null, mapDispatchToProps)(withRouter(FriendInterestList));","// ADAPTERS\nimport {config} from './AdapterConstants'\nimport {AUTH_HEADERS_JWT} from './AdapterConstants'\n\nclass AdapterChats {\n\n    //Request user conversation from server. \n    static getConversations(){\n        return fetch(`${config.url.API_ROOT}/conversations`, {\n            method: 'GET',\n            headers: AUTH_HEADERS_JWT\n        })\n        .then(res => res.json())\n    }\n\n    //Fetch new conversation or message to server. route will be \"conversation\" or \"message\" determining the server route \n    static  fetchToWebsocket(route, bodyData) {\n        fetch(`${config.url.API_ROOT}/${route}`, {\n            method: 'POST',\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`\n              },\n            body: JSON.stringify(bodyData)\n        })\n    }        \n}\n\nexport default AdapterChats;","//CONSTANTS\nimport {config} from './../Adapters/AdapterConstants'\nimport AdapterUser from './../Adapters/AdapterUser';\n\n//TYPES\nimport {\n    LOGOUT,\n    SAVE_CONVERSATIONS, \n    SAVE_SELECTED_CONVERSATION, \n    CLEAN_SELECTED_CONVERSATION, \n    APPEND_NEW_CONVERSATION,\n    ADD_ERROR_MESSAGE\n} from './../types';\n\n//REDUX-THUNK actions\n// Users start a new conversation. Conversations get persisted and broadcasted from server.\nexport const thunkSaveConversations = () => {\n    \n    return (dispatch) => {\n        fetch(`${config.url.API_ROOT}/conversations`, {\n            method: 'GET',\n            headers: {\n                \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`\n            }\n        })\n        .then(resp=>resp.json())\n        .then(resp => dispatch( { \n            type: SAVE_CONVERSATIONS,\n            payload: {\n                conversations: resp,\n            }\n        }))\n        .catch(() => {\n            dispatch( { \n                type: ADD_ERROR_MESSAGE,\n                payload: {\n                    key: \"unauthorizedToken\",\n                    value: \"Unauthorized credentials. Please, log in again.\",\n                }\n            })\n            AdapterUser.deleteToken();\n            return dispatch( { \n            type: LOGOUT,\n        })})\n    }\n}\n\n//REDUX actions\nexport function saveSelectedConversation(selectedConversation) {\n    return {\n        type: SAVE_SELECTED_CONVERSATION,\n        payload: {\n            selectedConversation: selectedConversation,\n        }\n    }\n}\n\nexport function cleanSelectedConversation() {\n    return {\n        type: CLEAN_SELECTED_CONVERSATION,\n    }\n}\n\nexport function saveUpdatedConversations(conversations) {\n    return {\n        type: SAVE_CONVERSATIONS,\n        payload: {\n            conversations: conversations,\n        }\n    }\n}\n\nexport function appendNewConversation(receivedNewConversation) {\n    console.log(\"appending one\")\n    return {\n        type: APPEND_NEW_CONVERSATION,\n        payload: {\n            receivedNewConversation: receivedNewConversation,\n        }\n    }\n}","import React from 'react';\nimport { Button } from 'semantic-ui-react'\nimport { connect } from 'react-redux';\n\n//ADAPTERS\nimport AdapterChats from '../../Adapters/AdapterChats';\n\n// ACTIONS\nimport { saveSelectedConversation } from './../../Actions/userConversationsActions'\n\n// REDUX PROPS \nconst mapStateToProps = state => {\n    return {\n        user_sender_id: state.userAuth.userId,\n        conversations: state.userConversations.conversations,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n      saveSelectedConversation: (selectedConversationId) => dispatch(saveSelectedConversation(selectedConversationId)),\n    }\n}\n\nconst StartChatButton = (props) => {\n    \n    //Check if the list of conversations -each one of them including their belonging users- includes the user id of the selected profile (the other user). If it is found, save in state the selected conversation. \n    function conversationExists(userReceiverId) {\n        let conversationFound = props.conversations.filter((conversation) => conversation.users.map((i)=> i.id).includes(userReceiverId));\n\n        if (conversationFound.length > 0) {\n            props.saveSelectedConversation(conversationFound[0]);\n            return true;\n        }\n    }\n\n    function handleClick() {\n\n        // The body variable contains both users in the conversation. Logged user and the selected user to chat with. The variable will be used in the server as params to create a new conversation belonging to both users. \n        let body = {\n            title: \"PRIVATE\",\n            sender_id: props.user_sender_id, \n            receiver_id: props.user_receiver_id\n        };\n    \n        // If the conversation already exists, close modal. Otherwise, create a new conversation, persisted so it gets broadcasted.\n        if (conversationExists(props.user_receiver_id)) {\n            props.onClickClose();\n        }\n        else {\n            AdapterChats.fetchToWebsocket(\"conversations\", body);\n            props.onClickClose();\n        }    \n    };\n\n    return (\n        <Button\n            onClick={() => handleClick()}\n            primary>Say <div className=\"btn-logo\">Supp?!</div>\n        </Button>\n    );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StartChatButton);","import React, { Component } from 'react';\nimport { withRouter} from 'react-router-dom';\n\n// ADAPTERS\nimport Adapters from './../../Adapters/Adapters';\n\n// STYLE CONSTANTS\n// Style for alternating (dis)connected user-status dot.\nconst divStyleActive = {\n    background: '#5CDB95'\n};\n\nconst divStyleInactive = {\n    background: '#05386B'\n};\n\n\nclass ProfileSquare extends Component {\n    //Check if the user is currently logged in. Display user-status dot color accordingly.  \n    isActive = () => {\n        if (this.props.user.active_user) {\n            return  divStyleActive\n        }\n        else {\n            return divStyleInactive\n        }\n    }\n\n    render = () => {\n        return (\n            <div \n                className=\"profile-image-space\"\n                onClick={this.props.handleOpen}\n            >\n                <div className=\"profile-image-username animated flipInY\">{\n                    Adapters.usernameShortFormat(this.props.user.username)\n                }</div>\n                <div className=\"profile-image-distance animated flipInY\">{this.props.user.distance}</div>\n                <div \n                    className=\"profile-image-logged animated flipInY\"\n                    style={this.isActive()}\n                ></div>\n                <img \n                    className=\"profile-image-list animated flipInY\" \n                    src={Adapters.getStandardImageUrl(this.props.user.profileImageLink)}\n                    alt=\"profile\" \n                />\n            </div>\n        );\n    }\n};\n\nexport default withRouter(ProfileSquare);","import React, { Component, Fragment } from 'react';\nimport { withRouter, NavLink} from 'react-router-dom';\nimport { Header, Image, Modal } from 'semantic-ui-react'\nimport { Icon } from 'semantic-ui-react'\n\n// ADAPTERS\nimport Adapters from './../../Adapters/Adapters';\nimport { config } from './../../Adapters/AdapterConstants'\n\n//COMPONENTS\nimport UserInterestList from './UserInterestList'\nimport FriendInterestList from './FriendInterestList'\nimport StartChatButton from './StartChatButton'\nimport ProfileSquare from './ProfileSquare'\n\nclass ProfileModal extends Component {\n\n    // Toggle true-false to close-open the modal. \n    state = { modalOpen: false }\n\n    handleOpen = () => this.setState({ modalOpen: true })\n\n    handleClose = () => this.setState({ modalOpen: false })\n\n    // Helper functions to build the modal\n    // Check the component that is triggering the modal so the correct trigger-component can be selected (square profile image or round chat image).\n    // NOTE: Case conditional statement should be used instead of if.\n    selectTrigger = () => {\n        if (this.props.origin === \"userListYou\") {\n            return <ProfileSquare \n                        user={this.props}\n                        handleOpen={this.handleOpen}\n                    />\n        }\n        if (this.props.origin === \"userList\") {\n            return <ProfileSquare \n                        user={this.props}\n                        handleOpen={this.handleOpen}\n                    />\n        }\n        if (this.props.origin === \"chatHeader\") {\n            return  <img \n                        className=\"chat-header-image\"\n                        onClick={this.handleOpen}\n                        src={Adapters.getStandardImageUrl(this.props.profileImageLink)}\n                        alt=\"Mini profile\"\n                    />\n        }\n    }\n\n    displayDistance = () => {\n        if (this.props.username !== \"YOU\") {\n            if (!!this.props.distance){\n            return ( <div className=\"ui tiny header\">\n                        <Icon \n                            color='teal' \n                            name='map marker alternate' \n                        />\n                        {this.props.distance} from you.\n                        </div>\n            )}\n        }\n    }\n\n    displayBio = () => {\n        if (this.props.bio) {\n            return <p>{this.props.bio}</p>\n        }\n        else {\n\n            if (this.props.username === \"YOU\") {\n                return (\n                    <Fragment>\n                        <p>You have not written anything yet.</p>\n                        <Icon \n                            color='teal' \n                            name='pencil alternate' \n                        />\n                        <NavLink to={config.route.URL_USER_PROFILE} exact>Edit Your Profile</NavLink>\n                    </Fragment>\n\n                )\n            }\n            else {\n                return <p>{Adapters.capitalize(this.props.username)} has not written anything yet.</p>\n            }\n        }\n    }\n\n    render = () => {\n        //Semantics React UI modal. It gets triggered (opened) with \"selectTrigger\" helper function.\n        return (\n            <Modal \n                dimmer={'inverted'} \n                size={'tiny'} \n                trigger={ this.selectTrigger() }\n                open={this.state.modalOpen}\n                onClose={this.handleClose}\n            >\n            <Modal.Header>\n                <div className=\"right\">\n                    {Adapters.capitalize(this.props.username) }\n                    <Icon \n                        color='teal' \n                        name='close' \n                        onClick={this.handleClose}\n                    />\n                </div>  \n            </Modal.Header>\n            <Modal.Content image>\n                <Image \n                    size='medium'\n                    wrapped\n                    src={Adapters.getStandardImageUrl(this.props.profileImageLink)} \n                />\n                <Modal.Description>\n                    <Header>About me</Header>\n                    {  this.displayBio() }  \n                    {  this.displayDistance() }      \n                    <Header>Interests</Header>\n                    {\n                        this.props.username === \"YOU\"\n                            ? <UserInterestList \n                                onClickClose={this.handleClose}\n                            /> \n                            : <FriendInterestList \n                                friendInterestArray={this.props.interests}\n                                onClickClose={this.handleClose}\n                            />\n                    }       \n                </Modal.Description>\n            </Modal.Content>\n            <Modal.Actions>\n                {\n                    this.props.username === \"YOU\" \n                    ?   null\n                    :   <StartChatButton \n                            user_receiver_id={this.props.userId}\n                            onClickClose={this.handleClose}\n                        />\n                }\n            </Modal.Actions>\n    \n        </Modal>\n        );\n    }\n};\n\nexport default withRouter(ProfileModal);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Loader } from 'semantic-ui-react'\n\n//ADAPTERS\nimport Adapters from './../../Adapters/Adapters';\n\n//COMPONENTS\nimport ProfileModal from \"./ProfileModal\"\n\n// REDUX PROPS \nconst mapStateToProps = state => {\n    return {\n        username: state.userProfile.username,\n        bio: state.userProfile.bio,\n        loggedIn: state.userAuth.loggedIn,\n        profileImageLink: state.userProfile.profileImageLink,\n        closestUsers: state.userFriends.closestUsers,\n        prevGeolocationLat: state.userProfile.prevGeolocationLat,\n    }\n}\n\nclass UserList extends Component {\n\n    // Get array with the returned closest users, map over it so for each one it's displayed a profile modal component. The origin is userList so the modal can display squared profile images.\n    generateUserList = (closestUsers) => {\n        return(\n            closestUsers.map(\n                (user) => \n                <ProfileModal \n                    key={user.userId}\n                    origin={\"userList\"}\n                    bio={user.bio}\n                    userId={user.userId}\n                    username={user.username}\n                    interests={user.interests}\n                    active_user={user.active_user}\n                    profileImageLink={user.profileImageLink}\n                    distance={\n                        Adapters.getReadableDistance(user.distance)\n                    }\n                />\n            )\n        )\n    }\n\n    render() {\n        \n        return (\n            <div className=\"central-container\">\n                {/* USER PROFILE SQUARE >> First square in the list.*/}\n                <ProfileModal \n                    origin={\"userListYou\"}\n                    username={\"YOU\"}\n                    active_user={true}\n                    bio={this.props.bio}\n                    profileImageLink={this.props.profileImageLink}\n                />\n                {/* CLOSEST USERS PROFILE SQUARES */}\n                {this.props.prevGeolocationLat\n                    ?   this.props.closestUsers.length !== 0\n                        ?   this.generateUserList(this.props.closestUsers) \n                        :   <div>\n                                <p className=\"loading-message\"> Ups! It looks like there's nobody with that interest around. Try another one!</p>\n                            </div>\n                    :   <div>\n                            <Loader active />\n                            <p className=\"loading-message\"> Finding you location and people around you... </p>\n                        </div>\n                }\n            </div>\n        );\n    }\n}\n\nexport default connect(mapStateToProps, null)(UserList);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Icon } from 'semantic-ui-react'\n\n//ADAPTERS\nimport AdapterChats from './../../Adapters/AdapterChats';\n\nconst mapStateToProps = state => {\n  return {\n      userId: state.userAuth.userId,\n      selectedConversation: state.userConversations.selectedConversation,\n  }\n}\n\nclass NewMessageForm extends Component {\n  // keeping local state for controlled inputs\n  state = {\n    text: '',\n  };\n\n  //Bad-words functionality\n  handleChange = e => {\n    var Filter = require('bad-words'),\n        filter = new Filter();\n        filter.addWords(\"suck\")\n        filter.removeWords(\"hell\")\n    this.setState({ text: filter.clean(e.target.value) });\n  };\n\n  //PROPS FUNCTIONALITY: Button handlers\n\n  pressedEnter = (event) => {\n    if (event.key === \"Enter\" ) {\n      this.handleSubmit();\n    }\n  }\n\n  handleSubmit = () => {    \n    // Variable containing new message information to persist  \n    let body = {\n      text: this.state.text,\n      conversation_id: this.props.selectedConversation.id,\n    };\n\n    AdapterChats.fetchToWebsocket(\"messages\", body);\n    this.setState({ text: '' });\n  };\n\n  render = () => {\n    return (\n      <div className=\"new-message-form\">\n          <textarea\n            className=\"new-message-input\"\n            type=\"text\"\n            value={this.state.text}\n            onChange={this.handleChange}\n            onKeyDown={this.pressedEnter}\n            placeholder=\"Enter new message\"\n          />\n          <div \n            className=\"chat-submit-btn\"\n            onClick={this.handleSubmit}\n          >\n            <Icon \n              color='teal' \n              name='send'\n            />\n            <p className=\"footer-logo\">Suppmit</p>\n          </div>\n      </div>\n    );\n  };\n}\n\nexport default connect(mapStateToProps, null)(NewMessageForm);","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Icon } from 'semantic-ui-react'\n\n//ADAPTERS\nimport Adapters from './../../Adapters/Adapters';\n\n//COMPONENTS\nimport NewMessageForm from './NewMessageForm';\nimport ProfileModal from './../CentralUsersSection/ProfileModal';\n\n// ACTIONS\nimport { cleanSelectedConversation } from './../../Actions/userConversationsActions'\n\n// REDUX PROPS \nconst mapStateToProps = state => {\n  return {\n      userId: state.userAuth.userId,\n      conversations: state.userConversations.conversations,\n      selectedConversation: state.userConversations.selectedConversation,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    cleanSelectedConversation: () => dispatch(cleanSelectedConversation()),\n  }\n}\n\n// STYLE CONSTANTS\n// Style for user message backgrounds to create alternate colors and alignment to identify users.\nconst divStyleUser = {\n  background: 'rgba(92, 219, 149, 0.25)',\n  textAlign: 'right',\n};\n\nconst divStyleFriend = {\n  background: 'rgba(55,150,131, 0.25)',\n};\n\n\nconst MessagesArea = (props) => {\n  \n  // Check if the message belongs to the logged user in state. Style accordingly.  \n  function isUser (userId) {\n    if (userId === props.userId) {\n        return  divStyleUser\n    }\n    else {\n        return divStyleFriend\n    }\n  }\n\n  // Get time message was created and return formated time.  \n  function getTime (timestamp) {\n      var time = new Date(timestamp)\n      return time.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })\n    }\n    \n  // Get the users from the serialized data in the conversation. Find and return the user is not the logged user in state.\n  function friendUser () {\n      return props.selectedConversation.users.find((u) => u.id !== props.userId)\n  }\n\n  // Get messages from the selected conversation. Sort by the date the message was created.\n  function sortConversations () {\n    return props.selectedConversation.messages.sort(\n      (a, b) => new Date(a.created_at) - new Date(b.created_at)\n    )\n  }\n\n  // Map over the sorted array of messages in order to build a formatted thread of messages using helper functions.\n  function displayMessages () {\n    return sortConversations().map(message => {\n      return  <div \n                key={message.id}\n                className=\"message-box\"\n                style={isUser(message.user.id)}\n              >\n              <div>\n                <div className=\"message-box-time\">\n                  {getTime(message.created_at)}\n                  {Adapters.capitalize(message.user.username)}\n                </div>\n                <div className=\"message-box-content\">\n                  {message.text}\n                </div>\n              </div>\n              </div>;\n    });\n  };\n\n  console.log(props.selectedConversation, props.userId)\n  return (\n    // Build formatted chat box\n    <div className=\"messages-box animated slideInUp delay-5s\">\n      <div className=\"messages-header\">\n          <div className=\"chat-header-title\">\n              <Icon \n                color='teal' \n                name='chat'\n              /> \n              with {Adapters.capitalize(friendUser().username)}\n          </div>\n            {/* Round user profile image that triggers profile modal. Information for modal comes from the serialized user data in the conversation */}\n            <ProfileModal \n              origin={\"chatHeader\"}\n              bio={friendUser().bio}\n              userId={friendUser().id}\n              username={friendUser().username}\n              interests={friendUser().interests}\n              profileImageLink={friendUser().profile_image_url}\n              distance={\n                Adapters.getReadableDistance(friendUser().distance)\n              }\n          />\n          {/* Round user profile image that triggers profile modal. Information for modal comes from the serialized user data in the conversation */}\n          <Icon \n              onClick={props.cleanSelectedConversation}\n              color='teal' \n              name='close'\n          />\n      </div>\n      <div className=\"outer-messages-list\">\n        <div className=\"messages-list\">\n          {displayMessages()}\n        </div>\n      </div>\n      <NewMessageForm conversation_id={props.selectedConversation.id} />\n    </div>\n  );\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MessagesArea);","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { ActionCable } from 'react-actioncable-provider';\n\n// ACTIONS\nimport { saveUpdatedConversations } from './../../Actions/userConversationsActions'\n\n// REDUX PROPS \nconst mapStateToProps = state => {\n  return {\n      conversations: state.userConversations.conversations,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    saveUpdatedConversations: (conversations) => dispatch(saveUpdatedConversations(conversations)),\n  }\n}\n\nclass MessagesCables extends Component {\n  // If a new broadcasted message from websockets is received, find the corresponding conversation and append it.\n  handleReceivedMessage = (response) => {\n      const { message } = response;\n      const conversations = [...this.props.conversations];\n      const conversation = conversations.find(\n        conversation => conversation.id === message.conversation_id\n      );\n      conversation.messages = [...conversation.messages, message];\n      this.props.saveUpdatedConversations(conversations)\n  };\n\n  render () {\n    return (\n      <Fragment>\n        {this.props.conversations.map(conversation => {\n          return (\n            <ActionCable\n              key={conversation.id}  //mapping purposes\n              channel={{ \n                channel: 'MessagesChannel', \n                conversation: conversation.id }}\n              onReceived={this.handleReceivedMessage}\n            />\n          )\n        })}\n      </Fragment>\n    );\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MessagesCables);","import React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\n\n//ADAPTERS\nimport Adapters from './../../Adapters/Adapters';\nimport { config } from './../../Adapters/AdapterConstants';\n\n// REDUX PROPS \nconst mapStateToProps = state => {\n    return {\n        userId: state.userAuth.userId,\n        conversations: state.userConversations.conversations,\n    }\n}\n\nconst Conversation = (props) => {\n\n    function findConversationUser () {\n        return props.conversation.users.find((u) => u.id !== props.userId)\n    }\n\n    function returnImage () {\n        var conversationUser = findConversationUser()\n        if ( conversationUser.profile_image_url !== \"undefined\" ) {\n            return `${config.url.API_SHORT_ROOT+props.conversation.users.find((u) => u.id !== props.userId).profile_image_url}`\n        } \n        else {\n            return config.url.GITHUB_URL_ROOT+`/assets/avatars/avatar${Math.ceil(Math.random() * Math.floor(4))}.gif`\n        }\n    }\n\n    function returnFirstLine () {\n        return props.conversation.messages.length === 0\n        ?   <div className=\"conversation-first-message\">\n                <p>Start a conversation!</p>\n            </div> \n        :   <div className=\"conversation-first-message\">\n                {Adapters.capitalize(props.conversation.messages[(props.conversation.messages.length)-1].user.username)}: {`${props.conversation.messages[(props.conversation.messages.length)-1].text.substring(0, 15)}...`}\n            </div> \n    }\n\n\n    return (\n        <Fragment>\n        {/* Top Conversation List >> Individual box */}\n        {/* Check if user has profile image. If not display animal avatar. */}\n        <div className=\"conversation-image-box\">\n            <img \n                className=\"conversation-image\"\n                src={returnImage()}\n                alt=\"Mini profile\"\n            />\n        </div>\n        \n        {/* Display name of last user who send  message and the beginning of the last message or default if none yet. */}\n        <div className=\"conversation-text-box\">\n\n            <div className=\"conversation-title\">\n                \n                {Adapters.capitalize(findConversationUser().username)}\n            \n                </div>\n\n            { returnFirstLine()}\n\n        </div>\n        </Fragment>\n    );\n};\n\nexport default connect(mapStateToProps, null)(Conversation);","import React from 'react';\nimport { connect } from 'react-redux';\n\n// ACTIONS\nimport { thunkSaveConversations, saveSelectedConversation } from './../../Actions/userConversationsActions'\n\n//COMPONENTS\nimport MessagesArea from './MessagesArea';\nimport MessagesCables from './MessagesCables';\nimport Conversation from './Conversation';\n\n// REDUX PROPS \nconst mapStateToProps = state => {\n  return {\n      userId: state.userAuth.userId,\n      conversations: state.userConversations.conversations,\n      selectedConversation: state.userConversations.selectedConversation,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    thunkSaveConversations: () => dispatch(thunkSaveConversations()),\n    saveSelectedConversation: (selectedConversationId) => dispatch(saveSelectedConversation(selectedConversationId)),\n  }\n}\n\nclass ConversationsList extends React.Component {\n    \n    // When the components mounts, fetch the user conversations from the server\n    componentDidMount = () => {\n      this.props.thunkSaveConversations();\n    };\n    \n    // Map conversations in state and display a formated list of them. If clicked, the conversation gets selected and displayed in chat box.\n    mapConversations = () => {\n        return this.props.conversations.map(conversation => {\n          return (\n            <div \n              key={conversation.id} \n              className=\"conversation-box\"\n              onClick={() => this.props.saveSelectedConversation(conversation)}\n            >\n              <Conversation \n                conversation={conversation}\n              />\n            </div> \n\n          );\n        });\n      };\n        \n    render = () => {\n        return (\n          <div className=\"conversations-box\">\n            {\n              // Check if there are conversations in state. If so, connect each conversation to the messages channel and handle received broadcasted messages\n              this.props.conversations.length\n              ? <MessagesCables />\n              : null\n            }\n            \n            <h2 className=\"heart-message\">Conversations</h2>\n            <div className=\"conversations-list\">\n              { this.mapConversations() }\n            </div>\n            { \n              // Check if there is a selected conversations in state. If so, open the chat box with all the conversation messages\n              this.props.selectedConversation \n              ? <MessagesArea />\n              : null\n            }\n            \n          </div>\n        );\n      };\n    }\n    \n    export default connect(mapStateToProps, mapDispatchToProps)(ConversationsList);","import React, { Component } from 'react';\n\n//COMPONENTS\nimport ConversationsList from  './ConversationsList'\n\nclass MessagingAside extends Component {\n    render() {\n        return (\n            <div className=\"aside-container-messaging\">\n                \n                <ConversationsList />\n            </div>\n        );\n    }\n}\n\nexport default MessagingAside;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ActionCable } from 'react-actioncable-provider';\n\n// ACTIONS\nimport { updateClosestUsers } from './../Actions/userFriendsActions'\n\n//REDUX PROPS \nconst mapStateToProps = state => {\n  return {\n    closestUsers: state.userFriends.closestUsers,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    updateClosestUsers: (closestUsers) => dispatch(updateClosestUsers(closestUsers)),\n  }\n}\n\nclass PresenceCable extends Component {\n  // The server broadcasts when a user (dis)connects. If the user is part of the closest users array, it changes status accordingly.\n  handleReceivedActiveUser = (response) => {\n    const { type } = response    \n    switch(type) {\n      case \"DC_USER\":\n        let closestUsers = [...this.props.closestUsers];\n        let closestUser = closestUsers.find(\n          closestUser => closestUser.userId === response.user\n        );\n        if (closestUser) {\n          closestUser.active_user = false\n          this.props.updateClosestUsers(closestUsers)\n        }\n        break;\n      case \"CO_USER\":\n        let closestUsers2 = [...this.props.closestUsers];\n        let closestUser2 = closestUsers2.find(\n          closestUser => closestUser.userId === response.user\n        );\n        if (closestUser2) {\n          closestUser2.active_user = true\n          this.props.updateClosestUsers(closestUsers2)\n        }\n        break;\n      default:\n        return null;\n    }\n      \n  };\n\n  render() {\n    return (\n            <ActionCable\n                channel={{ \n                  channel: 'GlobalPresenceChannel'\n                }}\n                onReceived={(response) => this.handleReceivedActiveUser(response)}\n            />\n    );\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PresenceCable);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ActionCable } from 'react-actioncable-provider';\n\n// ACTIONS\nimport { appendNewConversation } from './../../Actions/userConversationsActions'\n\n// REDUX PROPS \nconst mapStateToProps = state => {\n  return {\n      userId: state.userAuth.userId,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    appendNewConversation: (newConversation) => dispatch(appendNewConversation(newConversation)),\n  }\n}\n\nclass ConversationsCables extends Component {\n\n  // If a new broadcasted conversation from websockets is received, check if user is one of the user ids to whom the conversation belongs to (users are serialized). If so, appended into the list of conversations. Channels are private but this double-checks subscribers on the client-side.\n  handleReceivedConversation = (response) => {\n    const { conversation } = response;\n    if (conversation.users.map((i)=> i.id).includes(this.props.userId)) {\n      this.props.appendNewConversation(conversation);\n    }\n  };\n\n  render() {\n    return (\n      this.props.userId \n      ? <ActionCable\n            channel={{ \n              channel: 'ConversationsChannel'\n            }}\n            onReceived={(response) => this.handleReceivedConversation(response)}\n        />\n      : null\n    );\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConversationsCables);","import React from 'react';\nimport { connect } from 'react-redux';\n\n//COMPONENTS\nimport InterestsAside from './LeftInterestsSection/InterestsAside'\nimport UserList from './CentralUsersSection/UserList'\nimport MessagingAside from './RightChatsSection/MessagingAside'\nimport PresenceCable from './PresenceCable'\nimport ConversationsCables from './RightChatsSection/ConversationsCables';\n\n// REDUX PROPS   \nconst mapStateToProps = state => {\nreturn {\n    showChatContainer: state.containerDisplay.showChatContainer,\n    showInterestsContainer: state.containerDisplay.showInterestsContainer\n}}\n\nconst HomeContainer = (props) => {\n\n    return (\n        <div className=\"home-container\">\n            <PresenceCable /> {/* PresenceCable connects to websocket that handles connected-user status*/}\n            {/* Cables connected to backend websockets */}\n            <ConversationsCables />\n            <div className=\"screen-inner-home-container\">\n                {props.showChatContainer \n                    ? <MessagingAside />\n                    : null}\n                {props.showInterestsContainer ? <InterestsAside /> : null}\n                <UserList /> {/* Components in CentralUserSection folder*/}\n            </div>\n            <div className=\"inner-home-container\">\n                <InterestsAside /> {/* Components in LeftInterestSection folder*/}\n                <UserList /> {/* Components in CentralUserSection folder*/}\n                <MessagingAside /> {/* Components in RightChatsSection folder*/}\n            </div>\n        </div>\n    );\n};\n\nexport default connect(mapStateToProps, null)(HomeContainer);","import React, { Component} from 'react';\nimport { withRouter, NavLink} from 'react-router-dom';\nimport { connect } from 'react-redux';\n\n// ADAPTERS\nimport AdapterUser from './../Adapters/AdapterUser';\nimport {config} from './../Adapters/AdapterConstants'\n\n// ACTIONS\nimport { jwtSavedInLocalStorage, addErrorMessage, cleanErrorMessages } from './../Actions/userAuthActions';\n\n// REDUX PROPS \nconst mapDispatchToProps = dispatch => {\n  return {\n    jwtSavedInLocalStorage: () => dispatch(jwtSavedInLocalStorage()),\n    addErrorMessage: (key, value) => dispatch(addErrorMessage(key, value)),\n    cleanErrorMessages: () => dispatch(cleanErrorMessages()),\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n      errorMessages: state.userAuth.errorMessages,\n  }\n}\n\nclass Login extends Component {\n  // keeping local state\n  state = {\n    email: \"\",\n    password: \"\",\n  };\n\n  //PROPS FUNCTIONALITY: Button handlers\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    })\n  }\n\n  displayErrors = (field) => {\n    return this.props.errorMessages[field] \n    ? <p>{this.props.errorMessages[field]}</p>\n    : null\n  }\n\n  // Logs in user and saves token in LocalStorage and cookie. If error response, pushes to Login page.\n  //NOTE: I should add validation messages.\n  pressedEnter = (event) => {\n    if (event.key === \"Enter\" ) {\n      this.handleSubmit();\n    }\n  }\n\n  handleSubmit = () => {\n    this.props.cleanErrorMessages();\n    AdapterUser.login(this.state)\n    .then(json => { \n        AdapterUser.setToken(json.jwt);\n        this.props.jwtSavedInLocalStorage();\n        this.props.history.push(config.route.URL_HOME)\n    })\n    .catch(() => {\n      this.props.addErrorMessage(\"invalidCredentials\", \"The email or password did not match our records.\")\n    })\n  }\n \n  render() {\n    return (\n      <div className=\"overlay-box login\">\n        <div className=\"login-signup-form\">\n        {this.displayErrors(\"unauthorizedToken\")}\n          <h3 className=\"login-form-header\">LOG IN</h3>\n            <div className=\"ui tiny form\">\n              <div className=\"two fields\">\n                <div className=\"field\">\n                  <input \n                    type=\"text\"\n                    name=\"email\"\n                    placeholder=\"Account Email\"\n                    onChange={this.handleChange}\n                    onKeyUp={this.pressedEnter}\n                    value={this.state.email} />\n                </div>\n                <div className=\"field\">\n                  <input \n                    type=\"password\"\n                    name=\"password\"\n                    placeholder=\"Password\"\n                    onChange={this.handleChange}\n                    onKeyUp={this.pressedEnter}\n                    value={this.state.password}\n                  />\n                </div>\n              </div>\n              {this.displayErrors(\"invalidCredentials\")}\n              <div className=\"btn-submit\">\n                <div \n                  className=\"ui submit button\"\n                  onClick={this.handleSubmit}\n                >Log me in!</div>\n              </div>      \n            </div>      \n        </div>\n        <h3>New to Supp? <NavLink to={config.route.URL_SIGNUP} exact>Sign up!</NavLink></h3>\n\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Login));","import React, { Component} from 'react';\nimport { withRouter, NavLink} from 'react-router-dom';\nimport { connect } from 'react-redux';\n\n// ADAPTERS\nimport AdapterUser from './../Adapters/AdapterUser';\nimport {config} from './../Adapters/AdapterConstants'\n\n// ACTIONS\nimport { jwtSavedInLocalStorage, addErrorMessage, cleanErrorMessages } from './../Actions/userAuthActions';\n\n// REDUX PROPS \nconst mapDispatchToProps = dispatch => {\n  return {\n    jwtSavedInLocalStorage: () => dispatch(jwtSavedInLocalStorage()),\n    addErrorMessage: (key, value) => dispatch(addErrorMessage(key, value)),\n    cleanErrorMessages: () => dispatch(cleanErrorMessages()),\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n      errorMessages: state.userAuth.errorMessages,\n  }\n}\n\nclass Signup extends Component {\n\n  // keeping local state\n  state = {\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    agreedCheckbox: false,\n    checkboxColor: \"black\",\n  };\n\n  //PROPS FUNCTIONALITY: Button handlers\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    })\n  }\n\n  handleCheckbox = () => {\n    this.setState({\n      agreedCheckbox: !this.state.agreedCheckbox,\n    })\n  }\n\n  // Helper method to display error messages under each field.\n  displayErrors = (field) => {\n    return this.props.errorMessages[field] \n    ? <p>{this.props.errorMessages[field]}</p>\n    : null\n  }\n\n  // Display messages if there are no error messages.\n  displayMessages = () => {\n    if (Object.keys(this.props.errorMessages).length === 0) {\n    return <div>\n            <h3 className=\"signup-message\">Find people around you</h3>\n            <h3 className=\"signup-message\">Who love what you love</h3>\n            <h3 className=\"signup-message signup-message-connect\">Connect!</h3>\n            <h3 className=\"signup-message\">and make new friends</h3>\n        </div>    \n    }\n  }\n  \n  // Front-end validation of entered fields.\n  // Check if fields meet criteria; otherwise save messages as key:values for each field.\n  // Set state and then handleSubmit making sure state was set. \n  pressedEnter = (event) => {\n    if (event.key === \"Enter\" ) {\n      this.evaluateFields();\n    }\n  }\n  \n  evaluateFields = () => {\n    this.props.cleanErrorMessages();\n    var submitSignIn = true;\n    if (!this.state.username.trim()) {\n      submitSignIn = false;\n      this.props.addErrorMessage(\"username\", \"Enter a username.\")\n    }\n    if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(this.state.email)) {\n      submitSignIn = false;\n      this.props.addErrorMessage(\"email\", \"Invalid email address.\")\n    }\n    if (!(this.state.password.length > 7)) {\n      submitSignIn = false;\n      this.props.addErrorMessage(\"password\", \"Password must be at least 8 characters.\")\n    }\n    if (!!(this.state.password.length > 7)) {\n      if (!(this.state.password === this.state.confirmPassword)) {\n        submitSignIn = false;\n        this.props.addErrorMessage(\"confirmation\", \"Confirmation password must match password.\")\n      }\n    }\n    this.setState({\n      // Check if terms and conditions checkbox is selected. If so, signup the user. If not, style  box in red.\n      //If none of above conditions apply and agreed to terms, submit.\n      checkboxColor: !this.state.agreedCheckbox ? \"red\" : \"black\",\n    }, () => {\n        return submitSignIn && this.state.checkboxColor === \"black\" \n          ? this.handleSubmit() \n          : null;\n        });\n  }\n\n  handleSubmit = () => {\n    // Signup and get confirmation user was created.\n    return  AdapterUser.signup(this.state)\n      .then(json => { \n        if (json.ok) {\n            // Login with same user and password and get JWT token.\n            AdapterUser.login(this.state)\n            .then(json => {\n              AdapterUser.setToken(json.jwt);\n              this.props.jwtSavedInLocalStorage();\n              this.props.history.push(config.route.URL_HOME);\n            })\n            .catch(() => {\n              this.props.history.push(config.route.URL_LOGIN);\n            })\n           } \n        else{ \n          json.json()\n          .then(r => {\n            this.props.addErrorMessage(\"email\", r.errors[0])\n          })\n        }\n      })\n      .catch(() => {\n        this.props.history.push(config.route.URL_SIGNUP);\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"overlay-box signup\">\n        <div className=\"login-signup-form\">\n          <h3>Have an account? <NavLink to={config.route.URL_LOGIN} exact>Log in</NavLink></h3>\n          <h3 className=\"login-form-header\">SIGN UP</h3>\n          <div className=\"ui tiny form\">\n            <div className=\"two fields\">\n              <div className=\"field\">\n                <input \n                  type=\"text\"\n                  name=\"username\"\n                  placeholder=\"Username\"\n                  onChange={this.handleChange}\n                  onKeyUp={this.pressedEnter}\n                  value={this.state.username}\n                /> \n                {this.displayErrors(\"username\")}\n              </div>  \n              <div className=\"field\">\n                <input\n                  type=\"text\"\n                  name=\"email\"\n                  placeholder=\"Account Email\"\n                  onChange={this.handleChange}\n                  onKeyUp={this.pressedEnter}\n                  value={this.state.email}\n                />\n                {this.displayErrors(\"email\")}\n              </div>\n            </div>  \n            <div className=\"two fields\">\n                <div className=\"field\">\n                  <input \n                    type=\"password\"\n                    name=\"password\"\n                    placeholder=\"Password\"\n                    onChange={this.handleChange}\n                    onKeyUp={this.pressedEnter}\n                    value={this.state.password}\n                  />\n                  {this.displayErrors(\"password\")}\n                </div>\n                <div className=\"field\">\n                  <input \n                    type=\"password\"\n                    name=\"confirmPassword\"\n                    placeholder=\"Confirm Password\"\n                    onChange={this.handleChange}\n                    onKeyUp={this.pressedEnter}\n                    value={this.state.confirmPassword}\n                  />\n                  {this.displayErrors(\"confirmation\")}\n                </div>\n            </div>\n              <div className=\"btn-submit\">\n                <div className=\"ui checkbox\">\n                  <input \n                    type=\"checkbox\" \n                    onClick={this.handleCheckbox}\n                    checked={this.state.agreed}\n                  />\n                  <label \n                    className=\"signup-error\"\n                    style={{color: `${this.state.checkboxColor}`}}\n                    >I agree to the Terms and Conditions\n                  </label>\n                </div>\n                <div \n                  className=\"ui submit button\"\n                  onClick={this.evaluateFields}\n                >Create Account\n                </div>\n              </div>\n            </div>\n          </div>  \n          {this.displayMessages()}\n        </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Signup));","import React from 'react';\nimport { Loader } from 'semantic-ui-react'\n\nconst Loading = () => {\n \n    return (\n      <div className=\"overlay-box login\">\n        <Loader active />\n      </div>\n    )\n}\n\nexport default Loading;","import React, {Fragment} from 'react';\nimport {Route, Switch} from \"react-router-dom\";\n\n//ADAPTERS\nimport AdapterUser from './../Adapters/AdapterUser';\nimport {config} from './../Adapters/AdapterConstants'\n\n//COMPONENTS\nimport Login from './Login'\nimport Signup from './Signup' \nimport Loading from './Loading' \n\n\nconst WelcomeContainer = () => {\n\n    function displayCentralBox () {\n        if (AdapterUser.getToken()) {\n            return <Loading />\n        }\n        return   <Switch>\n                    <Route\n                        exact path={config.route.URL_SIGNUP}\n                        component={Signup}\n                    />\n                    <Route\n                        path={config.route.URL_ROOT}\n                        component={Login}\n                    />    \n                </Switch>\n    }\n\n    return (\n        <Fragment>\n\n           {displayCentralBox()}\n            \n            {/* Background images collage */}\n            <div className=\"welcome-container\">\n                <div className=\"row\"> \n                    <div className=\"column column-1\">\n                        <img src={config.url.GITHUB_URL_ROOT+\"/assets/welcome_images/helena-lopes-459331-unsplash.jpg\"} alt=\"Photographer: Helena Lopes on Unsplash\"/>\n                        <img src={config.url.GITHUB_URL_ROOT+\"/assets/welcome_images/mike-erskine-144525-unsplash.jpg\"} alt=\"Photographer: Mike Erskine on Unsplash\"/>\n                        <img src={config.url.GITHUB_URL_ROOT+\"/assets/welcome_images/alexis-brown-82988-unsplash.jpg\"} alt=\"Photographer: Alexis Brown on Unsplash\"/>\n                        <img src={config.url.GITHUB_URL_ROOT+\"/assets/welcome_images/ben-duchac-66002-unsplash.jpg\"} alt=\"Photographer: Ben Duchac on Unsplash\"/>\n                        <img src={config.url.GITHUB_URL_ROOT+\"/assets/welcome_images/kelsey-chance-575541-unsplash.jpg\"} alt=\"Photographer: Kelsey Chance on Unsplash\"/>\n                    </div>\n                    <div className=\"column column-2\">\n                        <img src={config.url.GITHUB_URL_ROOT+\"/assets/welcome_images/ben-duchac-66002-unsplash.jpg\"} alt=\"Photographer: Ben Duchac on Unsplash\"/>\n                        <img src={config.url.GITHUB_URL_ROOT+\"/assets/welcome_images/kelsey-chance-575541-unsplash.jpg\"} alt=\"Photographer: Kelsey Chance on Unsplash\"/>\n                        <img src={config.url.GITHUB_URL_ROOT+\"/assets/welcome_images/anthony-intraversato-455600-unsplash.jpg\"} alt=\"Photographer: Anthony Intraversato on Unsplash\"/>\n                        <img src={config.url.GITHUB_URL_ROOT+\"/assets/welcome_images/roman-kraft-669711-unsplash.jpg\"} alt=\"Photographer: Roman Kraft on Unsplash\"/>\n                        <img src={config.url.GITHUB_URL_ROOT+\"/assets/welcome_images/kelsey-chance-575541-unsplash.jpg\"} alt=\"Photographer: Kelsey Chance on Unsplash\"/>\n                    </div> \n                    <div className=\"column column-3\">\n                        <img src={config.url.GITHUB_URL_ROOT+\"/assets/welcome_images/mike-erskine-144525-unsplash.jpg\"} alt=\"Photographer: Mike Erskine on Unsplash\"/>\n                        <img src={config.url.GITHUB_URL_ROOT+\"/assets/welcome_images/alexis-brown-82988-unsplash.jpg\"} alt=\"Photographer: Alexis Brown on Unsplash\"/>\n                        <img src={config.url.GITHUB_URL_ROOT+\"/assets/welcome_images/roman-kraft-669711-unsplash.jpg\"} alt=\"Photographer: Roman Kraft on Unsplash\"/>\n                        <img src={config.url.GITHUB_URL_ROOT+\"/assets/welcome_images/helena-lopes-459331-unsplash.jpg\"} alt=\"Photographer: Helena Lopes on Unsplash\"/>\n                        <img src={config.url.GITHUB_URL_ROOT+\"/assets/welcome_images/mike-erskine-144525-unsplash.jpg\"} alt=\"Photographer: Mike Erskine on Unsplash\"/>\n                    </div>\n                    <div className=\"column column-4\">\n                        <img src={config.url.GITHUB_URL_ROOT+\"/assets/welcome_images/roman-kraft-669711-unsplash.jpg\"} alt=\"Photographer: Roman Kraft on Unsplash\"/>\n                        <img src={config.url.GITHUB_URL_ROOT+\"/assets/welcome_images/kelsey-chance-575541-unsplash.jpg\"} alt=\"Photographer: Kelsey Chance on Unsplash\"/>\n                        <img src={config.url.GITHUB_URL_ROOT+\"/assets/welcome_images/ben-duchac-66002-unsplash.jpg\"} alt=\"Photographer: Ben Duchac on Unsplash\"/>  \n                        <img src={config.url.GITHUB_URL_ROOT+\"/assets/welcome_images/ben-duchac-66002-unsplash.jpg\"} alt=\"Photographer: Ben Duchac on Unsplash\"/>\n                        <img src={config.url.GITHUB_URL_ROOT+\"/assets/welcome_images/kelsey-chance-575541-unsplash.jpg\"} alt=\"Photographer: Kelsey Chance on Unsplash\"/>\n                    </div>\n                </div>\n            </div>\n        </Fragment>\n    );\n};\n\nexport default WelcomeContainer;\n","// ADAPTERS\nimport {config} from './AdapterConstants'\nimport {INIT_HEADERS} from './AdapterConstants'\n\nclass AdapterUser {\n\n  //JWT management\n  // Save JWT token in local storage.\n  static setToken(jsonToken) {\n    return localStorage.setItem(\"token\", jsonToken)\n  }\n\n  // Get JWT token from local storage.\n  static getToken() {\n    return localStorage.getItem(\"token\")\n  }\n\n  // Save token as a cookie so the websocket authentication can retrieve JWT token and identify user.\n  // static saveTokenAsCookie() {\n  //   document.cookie = 'X-Authorization=' + this.getToken() + '; path=/';\n  // }\n\n  // Delete JWT token from local storage.\n  static deleteToken() {\n    localStorage.removeItem(\"token\")\n  }\n\n  // Fetch email/password to login and receive JWT token as a response. JWT is then used in getCurrentUser -Thunk action- ro retrieve user information\n  static login(loginState) {\n    return fetch(`${config.url.API_ROOT}/user_token`, {\n    method: 'POST',\n    headers: INIT_HEADERS,\n    body: JSON.stringify({\n      \"auth\": {\n        \"email\": loginState.email.toLowerCase(),\n        \"password\": loginState.password\n      }})\n    })\n    .then(resp => resp.json())\n  }\n\n  // Fetch sing-up information to signup and receive JWT token as a response. JWT is then used in getCurrentUser -Thunk action- ro retrieve user information\n  static signup(signupState) {\n    return fetch(`${config.url.API_ROOT}/users/create`, {\n    method: 'POST',\n    headers: INIT_HEADERS,\n    body: JSON.stringify({\n      \"user\": {\n        \"email\": signupState.email.toLowerCase(),\n        \"password\": signupState.password,\n        \"password_confirmation\": signupState.confirmPassword,\n        \"username\": signupState.username\n      }})\n    })\n  }        \n}\n\nexport default AdapterUser;\n","import React, { Component} from 'react';\nimport { connect } from 'react-redux';\nimport { Route, withRouter, Switch } from \"react-router-dom\";\nimport { ActionCableProvider } from 'react-actioncable-provider';\nimport { hot } from 'react-hot-loader';\n\n// ADAPTERS\nimport AdapterUser from './Adapters/AdapterUser';\nimport { config } from './Adapters/AdapterConstants';\n\n// ACTIONS\nimport { thunkLogin, jwtSavedInLocalStorage } from './Actions/userAuthActions';\nimport { thunkSaveClosestUsers } from './Actions/userFriendsActions';\nimport { thunkPersistCurrentGeolocation } from './Actions/userProfileActions';\n\n//COMPONENTS\nimport Header from './Components/Header';\nimport WelcomeContainer from './Components/WelcomeContainer';\nimport HomeContainer from './Components/HomeContainer';\nimport UpdateProfile from './Components/UpdateProfile';\nimport Footer from './Components/Footer';\n\n// REDUX PROPS \nconst mapStateToProps = state => {\n  return {\n      jwtToken: state.userAuth.jwtToken,\n      userId: state.userAuth.userId,\n      loggedIn: state.userAuth.loggedIn,\n      closestUsers: state.userFriends.closestUsers,\n      lat: state.userProfile.lat,\n      lon: state.userProfile.lon,\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    thunkSaveClosestUsers: () => dispatch(thunkSaveClosestUsers()), \n    thunkLogin: () => dispatch(thunkLogin()), \n    jwtSavedInLocalStorage: () => dispatch(jwtSavedInLocalStorage()), \n    thunkPersistCurrentGeolocation: (userId, lat, lon) => dispatch(thunkPersistCurrentGeolocation(userId,lat, lon)),\n  }\n}\n\nclass App extends Component {\n  \n  // Helper function. Contains Geolocation Web API code. Persist the coordinates if there is token in localStorage.\n  getCurrentPosition = () => {\n    if (AdapterUser.getToken() && navigator.geolocation) {\n      return navigator.geolocation.getCurrentPosition(\n        resp => {\n          this.props.thunkPersistCurrentGeolocation(this.props.userId, resp.coords.latitude, resp.coords.longitude);\n        })\n    }\n  }\n\n  // When the component mounts, check if there is token in localStorage. If so, login the user, return the user info & friends.\n  componentDidMount() { \n    if (AdapterUser.getToken()) {\n      //AdapterUser.saveTokenAsCookie();\n      this.props.jwtSavedInLocalStorage();\n      this.props.thunkLogin();\n      this.props.thunkSaveClosestUsers();\n    }\n  }\n\n  // When the component updates, check for several conditional statements.\n  componentDidUpdate(prevProps){\n    // Check if state has new UserId. If so, get current position.\n    if (this.props.userId !== prevProps.userId) {\n      this.getCurrentPosition();\n    }\n\n    // Check if state has new coordinates. If so, return closest friends if the user id logged in.\n    if (this.props.userId !== null) {\n      if (this.props.lat !== prevProps.lat || this.props.lon !== prevProps.lon) {\n        return this.props.loggedIn \n        ? this.props.thunkSaveClosestUsers()\n        : null\n      }\n    }\n\n    // Check if the user just logged in and the JWT token got saved in localStorage. If so, login the user, return the user info & friends.\n    if (prevProps.jwtToken === false && this.props.jwtToken === true) {\n      \n      if (AdapterUser.getToken()) {\n        //AdapterUser.saveTokenAsCookie();\n        this.props.thunkLogin();\n        this.props.thunkSaveClosestUsers();\n      }\n\n    }\n  }\n\n  // Check if there is a userId in localStorage. If so, check if the userId is already in state. Then, connect to websockets and reroute user.\n  // There is a wss uri query param for identifying user on websocket connection.\n  // In any other case, go to Welcome container.\n  routerFunction = () => {\n\n      return AdapterUser.getToken()\n      ? !!this.props.userId\n          ? <ActionCableProvider url={config.url.API_WS_ROOT+`?user=${this.props.userId}`}>\n              <Switch>\n                <Route\n                  path={config.route.URL_USER_PROFILE}\n                  component={UpdateProfile}\n                />\n                <Route\n                  path={config.route.URL_HOME}\n                  component={HomeContainer}\n                />\n                <Route\n                  path={config.route.URL_ROOT}\n                  component={HomeContainer}\n                />\n              </Switch>\n            </ActionCableProvider>\n        : <Route\n            path={config.route.URL_ROOT}\n            component={WelcomeContainer}\n          />\n    : <Route\n          path={config.route.URL_ROOT}\n          component={WelcomeContainer}\n      />\n  }\n\n  render() {\n    return (\n      <div>\n        <Header />\n        {this.routerFunction()}\n        <Footer />   \n      </div>\n    )\n  }\n}\n\nexport default hot(module)(withRouter(connect(mapStateToProps, mapDispatchToProps)(App)));","import React, { Component, Fragment } from 'react';\nimport { withRouter} from 'react-router-dom';\nimport { connect } from 'react-redux';\n\n// ADAPTERS\nimport Adapters from './../Adapters/Adapters';\nimport {config} from './../Adapters/AdapterConstants'\n\n// ACTIONS\nimport { thunkUpdateProfileInfo, thunkUploadProfile } from './../Actions/userProfileActions';\n\n// REDUX PROPS \nconst mapStateToProps = state => {\n    return {\n        user_id: state.userAuth.userId,\n        username: state.userProfile.username,\n        bio: state.userProfile.bio,\n        profileImageLink: state.userProfile.profileImageLink\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    thunkUploadProfile: (userId, profileImage) => dispatch(thunkUploadProfile(userId, profileImage)),\n    thunkUpdateProfileInfo: (userId, username, bio) => dispatch(thunkUpdateProfileInfo(userId, username, bio)),\n  }\n}\n\nclass UpdateProfile extends Component {\n\n    // keeping local state\n    state = {\n        username: Adapters.capitalize(this.props.username),\n        bio: this.props.bio,\n        profile_image: undefined\n    };\n\n    //PROPS FUNCTIONALITY: Button handlers\n    handleChange = (event) => {\n        this.setState({\n        [event.target.name]: event.target.value,\n        })\n    }\n\n    handleUpload = (event) => {\n        this.setState({\n        [event.target.name]: event.target.files[0],\n        })\n    }\n\n\n    handleSubmit = () => {\n        //Check if there is a photo. If so, persisted.\n        if (this.state.profile_image) {\n            this.props.thunkUploadProfile(this.props.user_id, this.state.profile_image)\n        }\n        // Check if there is a username or bio. If so, persisted.\n\n        if (this.state.username || this.state.bio) {\n            this.props.thunkUpdateProfileInfo(this.props.user_id, this.state.username, this.state.bio)\n        }\n\n        this.props.history.push(config.route.URL_HOME);\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <div className=\"user-account-container\">\n                    <div className=\"update-profile-form \">\n\n                        <div className=\"signup-message\">YOUR PROFILE</div>\n\n                        <br/>\n                        \n                        <h4>Username</h4>\n                        <div className=\"ui input\">\n                            <br/>\n                            <input \n                                type=\"text\"\n                                name=\"username\"\n                                placeholder=\"Username\"\n                                onChange={this.handleChange}\n                                value={this.state.username}\n                            />\n                        </div>\n                        \n                        <br/>\n                        \n                        <h4>About you</h4>\n                        <div className=\"ui form\">\n                            <textarea\n                                name=\"bio\"\n                                placeholder=\"Few words about yourself\"\n                                onChange={this.handleChange}\n                                value={this.state.bio}\n                            />\n                        </div>\n                        \n                        <h4> Upload a profile photo </h4>\n                        <input\n                            type=\"file\"\n                            name=\"profile_image\"\n                            ref={this.fileInput}\n                            onChange={this.handleUpload}\n                        /> \n                        \n                        <br/>   \n                        \n                        <div \n                            className=\"ui submit button\"\n                            onClick={this.handleSubmit}\n                            >Save Profile\n                        </div>\n                        \n                    </div>\n                </div>\n            </Fragment>\n\n           \n        );\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(UpdateProfile));","import React from 'react';\n\nconst Footer = () => {\n    return (\n            <div className=\"app-footer\">\n                <p className=\"footer-logo app-footer-left\">Supp</p>\n                <div className=\"app-footer-right\">\n                    <div>© 2018 Supp</div>\n                    <div>Privacy</div>\n                    <div>Terms</div>\n                </div>\n            </div>\n    );\n};\n\nexport default Footer;","import React from 'react';\nimport { withRouter, NavLink} from 'react-router-dom';\nimport { connect } from 'react-redux';\n\n// ADAPTERS\nimport AdapterUser from './../Adapters/AdapterUser';\nimport Adapters from './../Adapters/Adapters';\nimport { config } from './../Adapters/AdapterConstants'\n\n// ACTIONS\nimport { logout } from './../Actions/userAuthActions';\n\n// REDUX PROPS \nconst mapStateToProps = state => {\n    return {\n        username: Adapters.capitalize(state.userProfile.username),\n        loggedIn: state.userAuth.loggedIn,\n        profileImageLink: state.userProfile.profileImageLink\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        logout: () => dispatch(logout())\n    }\n  }\n  \nconst ProfileNavBar = (props) => {\n    \n    //Logout. Deletes JWT token from LocalStorage and cleans state.\n    function handleLogout() {\n        AdapterUser.deleteToken();\n        props.logout();\n        props.history.push(config.route.URL_LOGIN);\n    }\n\n    //Checks if user is logged-in. If so, it displays nanigation bar.\n    function toggleLogin() {\n        if (props.loggedIn) {\n            return (\n                <div className=\"user-profile-bar\">\n                    <div className=\"dropdown\">\n                        <img \n                            className=\"profile-image animated bounceIn delay-5s shake-slow\" \n                            src={Adapters.getStandardImageUrl(props.profileImageLink)}\n                            alt=\"profile\" \n                        />\n                        <div className=\"dropdown-content\">\n                            <div className=\"dropdown-item\">\n                                <p>{props.username}</p>\n                            </div>\n                            <NavLink to={config.route.URL_HOME} exact>Home</NavLink>\n                            <NavLink to={config.route.URL_USER_PROFILE}  exact>Profile</NavLink>\n                            <NavLink to={config.route.URL_USER_PROFILE} exact>Account</NavLink>\n                            <button className=\"logout-btn\" onClick={()=>handleLogout()}>Log Out</button> \n                        </div>\n                </div>\n                </div>\n                    \n            )\n        }\n        return null\n    }\n\n    return toggleLogin()\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(ProfileNavBar));","import React, { Fragment } from 'react';\nimport { Icon } from 'semantic-ui-react';\nimport { connect } from 'react-redux';\n\n// ACTIONS\nimport { displayScreenContainers } from './../Actions/containerDisplayActions';\n\n// REDUX PROPS \nconst mapDispatchToProps = dispatch => {\n  return {\n    displayScreenContainers: (chatAction, interestAction) => dispatch(displayScreenContainers(chatAction, interestAction))  \n}}\n\nconst mapStateToProps = state => {\n  return {\n    showChatContainer: state.containerDisplay.showChatContainer,\n    showInterestsContainer: state.containerDisplay.showInterestsContainer, \n    loggedIn: state.userAuth.loggedIn\n  }\n}\n\nconst IconMenuHeader = (props) => {\n\n    function handleClick(iconSelected) {\n        var chatAction;\n        var interestAction;\n        if (iconSelected === \"interest\") {\n            if ((!props.showChatContainer && !props.showInterestsContainer) || (props.showChatContainer && !props.showInterestsContainer)) {\n                chatAction = false;\n                interestAction = true;          \n            } else {\n                chatAction = false;\n                interestAction = false;          \n            }\n        } else if (iconSelected === \"chat\") {\n            if ((!props.showChatContainer && !props.showInterestsContainer) || (!props.showChatContainer && props.showInterestsContainer)) {\n                chatAction = true;\n                interestAction = false;          \n            } else {\n                chatAction = false;\n                interestAction = false;          \n            }\n        }\n        props.displayScreenContainers(chatAction, interestAction)\n    }\n\n    return (\n        props.loggedIn \n            ? <Fragment>\n                <Icon \n                    color='teal' \n                    name='list alternate'\n                    onClick={() => handleClick(\"interest\")}\n                />\n                <Icon \n                    color='teal' \n                    name='chat' \n                    onClick={() => handleClick(\"chat\")}\n                />\n            </Fragment>\n            : null\n    );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(IconMenuHeader);","//TYPES\nimport {\n    DISPLAY_SCREEN_CONTAINER, \n} from './../types';\n\n//REDUX actions\nexport function displayScreenContainers(chat, interest) {\n    return {\n        type: DISPLAY_SCREEN_CONTAINER,\n        payload: {\n            showChatContainer: chat,\n            showInterestsContainer: interest\n        }\n    }\n}","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\n// ADAPTERS\nimport {config} from './../Adapters/AdapterConstants'\n\n//COMPONENTS\nimport ProfileNavBar from './ProfileNavBar'\nimport IconMenuHeader from './IconMenuHeader';\n\nconst Header = () => {\n    return (\n            <div className=\"app-header\">\n                <NavLink to={config.route.URL_HOME} exact>\n                    <p className=\"header-logo animated rubberBand delay-2s\">Supp</p>\n                </NavLink>\n                <div className=\"app-screen-icons\">\n                \n                </div>\n                <div className=\"screen-app-icon-header\">\n                    <IconMenuHeader />\n                </div>\n                <ProfileNavBar />\n            </div>\n    );\n};\n\nexport default Header;","//CONSTANTS\nimport {config} from './../Adapters/AdapterConstants'\nimport AdapterUser from './../Adapters/AdapterUser';\n\n//TYPES\nimport {\n    JWT, \n    LOGIN, \n    LOGOUT,\n    ADD_ERROR_MESSAGE,\n    CLEAN_ERROR_MESSAGES\n} from './../types';\n\n//REDUX-THUNK actions\n// Login, currentGeolocation and closestUsers happen sequentially.\nexport const thunkLogin = () => {\n\n    return (dispatch) => {\n        fetch(`${config.url.API_ROOT}/user/auth`, {\n            method: \"GET\",\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`\n              }\n          })\n        .then(r=> r.json())\n        .then(resp => dispatch( { \n            type: LOGIN,\n            payload: {\n                username: resp.username,\n                email: resp.email,\n                userId: resp.id,\n                bio: resp.bio === null ? \"\" : resp.bio,\n                loggedIn: true,\n                userInterests: resp.userInterests,\n                profileImageLink: resp.profile_image,\n                prevGeolocationLat: resp.lat, \n                prevGeolocationLon: resp.lon, \n            }\n        }))\n        .catch(() => {\n            dispatch( { \n                type: ADD_ERROR_MESSAGE,\n                payload: {\n                    key: \"unauthorizedToken\",\n                    value: \"Unauthorized credentials. Please, log in again.\",\n                }\n            })\n            AdapterUser.deleteToken();\n            return dispatch( { \n            type: LOGOUT,\n        })})\n    }\n}\n\n//REDUX actions\nexport function jwtSavedInLocalStorage() {\n    return {\n        type: JWT,\n    }\n}\n  \nexport function logout() {\n    return {\n        type: LOGOUT,\n    }\n}\n\nexport function addErrorMessage(key, value) {\n    return {\n        type: ADD_ERROR_MESSAGE,\n        payload: {\n            key: key,\n            value: value,\n        }\n    }\n}\n\nexport function cleanErrorMessages() {\n    return {\n        type: CLEAN_ERROR_MESSAGES,\n        payload: {\n            errorMessages: {},\n        }\n    }\n}","//CONSTANTS\nimport {config} from './../Adapters/AdapterConstants'\nimport AdapterUser from './../Adapters/AdapterUser';\n\n//TYPES\nimport {\n    LOGOUT,\n    SAVE_CLOSEST_USERS, \n    UPDATE_ACTIVE_CLOSEST_USERS,\n    SAVE_FILTERED_CLOSEST_USERS,\n    ADD_ERROR_MESSAGE\n} from './../types';\n\n//REDUX-THUNK actions\nexport const thunkSaveClosestUsers = () => {\n\n    return (dispatch) => {\n        fetch(`${config.url.API_ROOT}/users`, {\n            method: 'GET',\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`\n                }\n        })\n        .then(r=>r.json())\n        .then(resp => dispatch( { \n            type: SAVE_CLOSEST_USERS,\n            payload: {\n                closestUsers: resp,\n            }\n        }))\n        .catch(() => console.log(\"No closest users yet\"))\n    }\n}\n\n\n// When an interest is selected, an array with users matching that interest gets returned.\nexport const thunkSaveFilteredClosestUsers = (filterTermId) => {\n\n    return (dispatch) => {\n        fetch(`${config.url.API_ROOT}/users`, {\n            method: 'POST',\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify({\n                \"filter\": {\n                  \"filterId\": filterTermId,\n                }\n            })\n        })\n        .then(r=>r.json())\n        .then(resp => dispatch( { \n            type: SAVE_FILTERED_CLOSEST_USERS,\n            payload: {\n                closestUsers: resp,\n            }\n        }))\n        .catch(() => {\n            dispatch( { \n                type: ADD_ERROR_MESSAGE,\n                payload: {\n                    key: \"unauthorizedToken\",\n                    value: \"Unauthorized credentials. Please, log in again.\",\n                }\n            })\n            AdapterUser.deleteToken();\n            return dispatch( { \n            type: LOGOUT,\n        })})\n    }\n}\n\nexport function updateClosestUsers(closestUsers) {\n    return {\n        type: UPDATE_ACTIVE_CLOSEST_USERS,\n        payload: {\n            closestUsers: closestUsers,\n        }\n    }\n}","const prod = {\n  url: {\n    API_SHORT_ROOT: 'https://supp-server.herokuapp.com',\n    API_ROOT: 'https://supp-server.herokuapp.com/api/v1',\n    API_WS_ROOT: 'wss://supp-server.herokuapp.com/api/v1/cable',\n    GITHUB_URL_ROOT: 'https://albertcarreras.github.io/supp-client/'\n  },\n  route: {\n    URL_ROOT: '/supp-client',\n    URL_HOME: '/supp-client/home',\n    URL_LOGIN: '/supp-client/login',\n    URL_SIGNUP: '/supp-client/signup',\n    URL_USER_PROFILE: '/supp-client/user/profile'\n  }\n};\n\nconst dev = {\n  url: {\n    API_SHORT_ROOT: 'http://localhost:3000',\n    API_ROOT: 'http://localhost:3000/api/v1',\n    API_WS_ROOT: 'ws://localhost:3000/api/v1/cable',\n    GITHUB_URL_ROOT: ''\n  },\n  route: {\n    URL_ROOT: '/',\n    URL_HOME: '/home',\n    URL_LOGIN: '/login',\n    URL_SIGNUP: '/signup',\n    URL_USER_PROFILE: '/user/profile'\n  }\n};\n\nexport const config = process.env.REACT_APP_STAGE === 'dev' ? dev : prod;\n\n//HEADERS\nexport const AUTH_HEADERS_JSON_JWT =  {\n  \"Accept\": \"application/json\",\n  \"Content-Type\": \"application/json\",\n  \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`\n};\n\nexport const AUTH_HEADERS_JWT =  {\n  \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`\n};\n\nexport const INIT_HEADERS =  {\n    \"Accept\": \"application/json\",\n    \"Content-Type\": \"application/json\",\n};","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    JWT, \n    LOGIN,\n    ADD_ERROR_MESSAGE, \n    CLEAN_ERROR_MESSAGES,\n} from '../types';\n  \nconst initialState = {\n    jwtToken: false,\n    email: \"\",\n    userId: null,\n    loggedIn: false,\n    errorMessages: {}\n}\n\nexport default function userAuthReducer(state = initialState, action) {\n    switch(action.type) {\n        case JWT: {\n            return { ...state,\n                jwtToken: true,\n            }\n        }\n        case LOGIN:\n            return { ...state,\n                email: action.payload.email,\n                userId: action.payload.userId,\n                loggedIn: true,\n            }\n\n        case ADD_ERROR_MESSAGE:  \n            return { ...state,\n                // errorMessages: Object.assign({}, state.errorMessages, {[action.payload.key]: action.payload.value}),\n                errorMessages: {...state.errorMessages, [action.payload.key]: action.payload.value},\n            }\n\n        case CLEAN_ERROR_MESSAGES:\n            return { ...state,\n                errorMessages: {},\n            }\n  \n        default:\n            return state;\n    }\n}","import {\n    LOGIN,\n    SAVE_PROFILE,\n    SAVE_PROFILE_IMAGE, \n    SAVE_CURRENT_GEOLOCATION\n} from '../types';\n  \nconst initialState = {\n    username: \"\",\n    bio: \"\",\n    profileImageLink: undefined,\n    lat: undefined,\n    lon: undefined,\n    prevGeolocationLat: undefined,\n    prevGeolocationLon: undefined\n}\n\nexport default function userProfileReducer(state = initialState, action) {\n    switch(action.type) {\n\n        case LOGIN:\n            return { ...state,\n                username: action.payload.username,\n                bio: action.payload.bio,\n                profileImageLink: action.payload.profileImageLink,\n                prevGeolocationLat: action.payload.prevGeolocationLat, \n                prevGeolocationLon: action.payload.prevGeolocationLon,\n                loggedIn: true,\n            }\n\n        case SAVE_PROFILE:\n            return { ...state,\n                username: action.payload.username,\n                bio: action.payload.bio,\n            }\n        case SAVE_PROFILE_IMAGE:\n            return { ...state,\n                profileImageLink: action.payload.profileImageLink,\n            }\n        case SAVE_CURRENT_GEOLOCATION:\n            return { ...state,\n                lat: action.payload.lat,\n                lon: action.payload.lon,\n                prevGeolocationLat: action.payload.lat,\n                prevGeolocationLon: action.payload.lon,    \n            }\n  \n        default:\n            return state;\n    }\n}","import {\n    LOGIN,\n    SAVE_USER_INTERESTS,\n    SELECT_COMMON_INTERESTS, \n    UNSELECT_COMMON_INTERESTS\n} from '../types';\n  \nconst initialState = {\n    userInterests: [],\n    selectedCommonInterest: undefined\n}  \n\nexport default function userInterestsReducer(state = initialState, action) {\n    switch(action.type) {\n\n        case LOGIN:\n        return { ...state,\n            userInterests: action.payload.userInterests,\n            selectedCommonInterest: action.payload.selectedCommonInterest,\n        }\n\n        case SELECT_COMMON_INTERESTS:\n        return { ...state,\n            selectedCommonInterest: action.payload.selectedCommonInterest,\n        }\n        \n        case UNSELECT_COMMON_INTERESTS:\n        return { ...state,\n            selectedCommonInterest: undefined,\n        }  \n\n        case SAVE_USER_INTERESTS:\n        return { ...state,\n            userInterests: action.payload.userInterestArray,\n        }\n  \n        default:\n            return state;\n    }\n}","import {\n    SAVE_CLOSEST_USERS, \n    UPDATE_ACTIVE_CLOSEST_USERS,\n    SAVE_FILTERED_CLOSEST_USERS\n} from '../types';\n  \nconst initialState = {\n    closestUsers: []\n}\n\nexport default function userFriendsReducer(state = initialState, action) {\n    switch(action.type) {\n            \n        case SAVE_CLOSEST_USERS:\n            return { ...state,\n                    closestUsers: action.payload.closestUsers,\n        }    \n\n        case SAVE_FILTERED_CLOSEST_USERS:\n            return { ...state,\n                    closestUsers: action.payload.closestUsers,\n        }\n\n        case UPDATE_ACTIVE_CLOSEST_USERS:\n            return { ...state,\n                    closestUsers: action.payload.closestUsers,\n        } \n\n        default:\n            return state;\n    }\n}","import {\n    SAVE_CONVERSATIONS, \n    SAVE_SELECTED_CONVERSATION,\n    CLEAN_SELECTED_CONVERSATION,\n    APPEND_NEW_CONVERSATION, \n} from '../types';\n  \nconst initialState = {\n    conversations: [],\n    selectedConversation: undefined\n}\n\nexport default function userConversationsReducer(state = initialState, action) {\n    switch(action.type) {\n        \n        case SAVE_CONVERSATIONS:\n        return { ...state,\n            conversations: action.payload.conversations,\n        }\n\n        case APPEND_NEW_CONVERSATION:\n        return { ...state,\n            conversations: [...state.conversations, action.payload.receivedNewConversation]\n        }\n        \n        case SAVE_SELECTED_CONVERSATION:\n        return { ...state,\n            selectedConversation: action.payload.selectedConversation,\n        }\n\n        case CLEAN_SELECTED_CONVERSATION:\n        return { ...state,\n            selectedConversation: undefined,\n        }\n\n        default:\n            return state;\n    }\n}","import {\n    DISPLAY_SCREEN_CONTAINER, \n} from '../types';\n  \nconst initialState = {\n    showChatContainer: false,\n    showInterestsContainer: false\n}\n\nexport default function userProfileReducer(state = initialState, action) {\n    switch(action.type) {\n\n        case DISPLAY_SCREEN_CONTAINER:\n            return { ...state,\n                showChatContainer: action.payload.showChatContainer,\n                showInterestsContainer: action.payload.showInterestsContainer\n            }\n  \n        default:\n            return state;\n    }\n}","import { combineReducers } from \"redux\";\n\n//REDUCERS\nimport userAuth from \"./userAuthReducer\";\nimport userProfile from \"./userProfileReducer\";\nimport userInterests from \"./userInterestsReducer\";\nimport userFriends from \"./userFriendsReducer\";\nimport userConversations from \"./userConversationsReducer\";\nimport containerDisplay from \"./containerDisplayReducer\";\n\nconst combinedReducers = combineReducers({\n    userAuth,\n    userProfile,\n    userInterests,\n    userFriends,\n    userConversations,\n    containerDisplay\n});\n\nconst reducer = (state, action) => {\n    // LOGOUT action sends undefined state, which will make each reducer return their initial state on the default action.\n    if (action.type === 'LOGOUT') {\n        state = undefined;\n    }\n    return combinedReducers(state, action);\n}\n\nexport default reducer;\n  \n  ","import reducer from './Reducers/rootReducer';\nimport {applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\n\nconst store =  process.env.REACT_APP_STAGE === 'dev' \n? createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ \n  && window.__REDUX_DEVTOOLS_EXTENSION__(),\n  applyMiddleware(thunk, logger), \n  ) \n: createStore(\n  reducer,\n  applyMiddleware(thunk), \n  );\n  \n  export default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router} from 'react-router-dom';\n\nimport registerServiceWorker from './registerServiceWorker';\n\n//REDUX\nimport store from './store';\n\n//STYLING\nimport './Style/index.scss';\nimport 'semantic-ui/dist/semantic.min.css'; //CSS Semantics library\nimport './Style/App.scss'; //custom CSS\n\n//COMPONENTS\nimport App from './App';\n\nReactDOM.render(\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>,\n    document.getElementById('root')\n);\n\nregisterServiceWorker();\n","export const JWT = 'JWT';\nexport const LOGIN = 'LOGIN';\nexport const LOGOUT = 'LOGOUT';\nexport const SAVE_PROFILE = 'SAVE_PROFILE';\nexport const SAVE_PROFILE_IMAGE = 'SAVE_PROFILE_IMAGE';\nexport const SAVE_CURRENT_GEOLOCATION = 'SAVE_CURRENT_GEOLOCATION';\nexport const SAVE_CLOSEST_USERS = 'SAVE_CLOSEST_USERS';\nexport const UPDATE_ACTIVE_CLOSEST_USERS = 'UPDATE_ACTIVE_CLOSEST_USERS';\nexport const SELECT_COMMON_INTERESTS = 'SELECT_COMMON_INTERESTS';\nexport const UNSELECT_COMMON_INTERESTS = 'UNSELECT_COMMON_INTERESTS';\nexport const SAVE_FILTERED_CLOSEST_USERS = 'SAVE_FILTERED_CLOSEST_USERS';\nexport const SAVE_USER_INTERESTS = 'SAVE_USER_INTERESTS';\nexport const REMOVE_USER_INTERESTS = 'REMOVE_USER_INTERESTS';\nexport const SAVE_CONVERSATIONS = 'SAVE_CONVERSATIONS';\nexport const APPEND_NEW_CONVERSATION = 'APPEND_NEW_CONVERSATION';\nexport const SAVE_SELECTED_CONVERSATION = 'SAVE_SELECTED_CONVERSATION';\nexport const CLEAN_SELECTED_CONVERSATION = 'CLEAN_SELECTED_CONVERSATION';\nexport const CLEAN_ERROR_MESSAGES = 'CLEAN_ERROR_MESSAGES';\nexport const ADD_ERROR_MESSAGE = 'ADD_ERROR_MESSAGE';\nexport const DISPLAY_SCREEN_CONTAINER = 'DISPLAY_SCREEN_CONTAINER';","//CONSTANTS\nimport {config} from './../Adapters/AdapterConstants'\nimport AdapterUser from './../Adapters/AdapterUser';\n\n//TYPES\nimport {\n    LOGOUT,\n    SAVE_PROFILE, \n    SAVE_PROFILE_IMAGE, \n    SAVE_CURRENT_GEOLOCATION,\n    ADD_ERROR_MESSAGE\n} from './../types';\n\n//REDUX-THUNK actions\nexport const thunkPersistCurrentGeolocation = (userId, latitude, longitude) => {\n\n    return (dispatch) => {\n        fetch(`${config.url.API_ROOT}/user/${userId}`, {\n            method: 'PATCH',\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify({\n                \"user\": {\n                    \"last_location_lat\": latitude,\n                    \"last_location_lon\": longitude,\n                }})\n        })\n        .then(r=>r.json())\n        .then(resp => dispatch({ \n            type: SAVE_CURRENT_GEOLOCATION,\n            payload: {\n                lat: resp.lat,\n                lon: resp.lon,\n                prevGeolocationLat: resp.lat,\n                prevGeolocationLon: resp.lon,\n            }\n        }))\n        .catch(() => {\n            dispatch( { \n                type: ADD_ERROR_MESSAGE,\n                payload: {\n                    key: \"unauthorizedToken\",\n                    value: \"Unauthorized credentials. Please, log in again.\",\n                }\n            })\n            AdapterUser.deleteToken();\n            return dispatch( { \n            type: LOGOUT,\n        })})\n    }\n}\n\n// Users update profile photo and text.\nexport const thunkUploadProfile = (userId, profileImage) => {\n\n    let formData = new FormData();\n    formData.append('user_id', userId);\n    formData.append('profile_image', profileImage);\n    \n    return (dispatch) => {\n        fetch(`${config.url.API_ROOT}/users/uploadProfile`, {\n            method: 'POST',\n            headers: {\n                \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`\n              },\n            body: formData\n            })\n        .then(resp=>resp.json())\n        .then(resp => dispatch( { \n            type: SAVE_PROFILE_IMAGE,\n            payload: {\n                profileImageLink: resp.url,\n            }\n        }))\n        .catch(() => {\n            dispatch( { \n                type: ADD_ERROR_MESSAGE,\n                payload: {\n                    key: \"unauthorizedToken\",\n                    value: \"Unauthorized credentials. Please, log in again.\",\n                }\n            })\n            AdapterUser.deleteToken();\n            return dispatch( { \n            type: LOGOUT,\n        })})\n    }\n}\n\nexport const thunkUpdateProfileInfo = (userId, username, bio) => {\n\n    let bodyUpdateProfileInfo = {\"user\": {}};\n    \n    if (username) {\n      bodyUpdateProfileInfo = Object.assign({}, bodyUpdateProfileInfo, {\"user\": {\n        ...bodyUpdateProfileInfo.user,\n        \"username\": username\n      }\n    })} \n\n    if (bio) {\n      bodyUpdateProfileInfo = Object.assign({}, bodyUpdateProfileInfo, {\"user\": {\n        ...bodyUpdateProfileInfo.user,\n        \"bio\": bio\n      }\n    })}\n    \n    return (dispatch) => {\n        fetch(`${config.url.API_ROOT}/user/${userId}`, {\n            method: 'PATCH',\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${localStorage.getItem(\"token\")}`\n            },\n            body: JSON.stringify(bodyUpdateProfileInfo)\n            })\n        .then(resp=>resp.json())\n        .then(() => dispatch( { \n            type: SAVE_PROFILE,\n            payload: {\n                username: username,\n                bio: bio,\n            }\n        }))\n        .catch(() => {\n            dispatch( { \n                type: ADD_ERROR_MESSAGE,\n                payload: {\n                    key: \"unauthorizedToken\",\n                    value: \"Unauthorized credentials. Please, log in again.\",\n                }\n            })\n            AdapterUser.deleteToken();\n            return dispatch( { \n            type: LOGOUT,\n        })})\n    }\n}"],"sourceRoot":""}